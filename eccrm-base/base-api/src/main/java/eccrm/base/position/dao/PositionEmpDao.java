package eccrm.base.position.dao;


import eccrm.base.employee.domain.Employee;
import eccrm.base.log.OperateType;
import eccrm.base.log.annotations.LogInfo;
import eccrm.base.position.bo.PositionEmpBo;
import eccrm.base.position.domain.PositionEmp;
import eccrm.base.position.vo.PositionEmpVo;
import org.hibernate.criterion.DetachedCriteria;

import java.util.Collection;
import java.util.List;
import java.util.Set;

/**
 * Generated by chenl on 2014-10-18.
 */

public interface PositionEmpDao {

    @LogInfo(type = OperateType.ADD, describe = "机构岗位-新增")
    String save(PositionEmp positionEmp);

    @LogInfo(type = OperateType.MODIFY, describe = "机构岗位-更新")
    void update(PositionEmp positionEmp);

    List<PositionEmp> query(PositionEmpBo bo);

    Long getTotal(PositionEmpBo bo);

    PositionEmp findById(String id);

    @LogInfo(type = OperateType.MODIFY, describe = "机构岗位-删除")
    int deleteById(String id);

    List<PositionEmp> findByPositionID(String positionId);

    /**
     * 查询岗位下员工的ID列表
     *
     * @param positionIds 岗位ID列表
     * @return 员工ID集合
     */
    List<String> findEmployeeIds(String[] positionIds);

    /**
     * 根据员工id查询对应的岗位和机构信息
     *
     * @param empId 员工id（不可为空）
     */
    List<PositionEmpVo> queryByEmp(String empId);

    /**
     * 查询员工所属的岗位列表
     *
     * @param empId 员工ID
     * @return 岗位ID集合
     */
    List<String> findPositionIds(String empId);

    /**
     * 查询员工所属的机构id列表
     *
     * @param empId 员工id
     * @return 机构id列表
     */
    List<String> findOrgIds(String empId);

    /**
     * 查询员工所具有的系统列表
     *
     * @param empId 员工id
     * @return 系统编号集合
     */
    List<String> findOrgParams(String empId);

    /**
     * 删除关联关系
     *
     * @param orgId      组织机构
     * @param positionId 岗位
     * @param empIds     员工列表
     */
    void delete(String orgId, String positionId, String[] empIds);

    List<Employee> queryEmployees(String orgId, String[] positionNames);

    /**
     * 根据组织机构id、岗位id查询对应的员工（分页查询）
     *
     * @param orgId      组织机构id
     * @param positionId 岗位id
     */
    List<Employee> queryEmployee(String orgId, String positionId);

    /**
     * 根据组织机构ID、岗位ID查找当前岗位上级岗位负责人
     *
     * @param orgId      机构ID
     * @param positionId 岗位ID
     */
    List<Employee> queryParentEmployees(String orgId, String positionId);

    /**
     * 根据组织机构ID、岗位ID查找岗位员工机构
     *
     * @param orgId      机构ID
     * @param positionId 岗位ID
     */
    List<PositionEmp> findPosEmp(String orgId, String positionId);

    /**
     * 查询指定机构的指定岗位下的员工ID集合
     *
     * @param orgId      机构ID
     * @param positionId 岗位ID
     * @return 员工ID
     */
    public List<String> findEmpIds(String orgId, String positionId);

    /**
     * 判断员工、机构、岗位的关系是否已经存在
     *
     * @param orgId      组织机构id
     * @param positionId 岗位id
     * @param empId      员工ID
     * @return true存在、false不存在
     */
    boolean isExists(String orgId, String positionId, String empId);

    List<PositionEmp> findPosEmp(String[] orgIds, String[] positionIds);

    /**
     * 联合查询指定岗位id或者指定机构或者指定系统下的所有符合的员工的id
     * 如果所有的参数均为空，则返回null
     *
     * @param positionIds 岗位id集合
     * @param orgIds      机构id集合
     * @param paramIds    系统id集合
     * @return 员工id集合
     */
    List<String> findEmpIds(Collection<String> positionIds, Collection<String> orgIds, Collection<String> paramIds);

    /**
     * 查询指定机构下的员工ID集合
     *
     * @param orgIds 机构ID
     * @return 员工ID集合
     */
    List<String> findOrgEmpIds(List<String> orgIds);

    /**
     * 返回指定员工所属的机构id集合的离线查询对象
     *
     * @param empId 员工id
     * @return 离线查询对象
     */
    DetachedCriteria findEmpOrgIds(String empId);

    /**
     * 返回指定员工的所有岗位id集合的离线查询对象
     *
     * @param empId 员工ID
     * @return 离线查询对象
     */
    DetachedCriteria findEmpPositionIds(String empId);

    /**
     * 返回指定员工的所有系统集合的离线查询对象
     *
     * @param empId 员工ID
     * @return 离线查询对象
     */
    DetachedCriteria findEmpParams(String empId);

    /**
     * 查询指定员工所具有的所有系统所对应的机构的id
     * 查询方式：根据员工id-->获得机构id-->系统-->机构id
     *
     * @param empId 员工ID
     * @return 离线查询对象
     */
    DetachedCriteria findEmpPramOrgIds(String empId);

    /**
     * 查询指定系统集合对应的组织机构的ID离线查询对象
     *
     * @param paramIds 系统编号集合
     * @return 离线查询对象
     */
    DetachedCriteria findParamOrgIds(Set<String> paramIds);

    /**
     * 查询指定员工的组织机构及下级组织机构的id
     *
     * @param empId 员工ID
     * @return 离线查询对象
     */
    DetachedCriteria findCurrentAndChildOrgIds(String empId);

    /**
     * 查询指定业态下的员工ID集合
     *
     * @param params 业态集合
     */
    List<String> findParamEmpIds(List<String> params);

    /**
     * 根据机构岗位ID集合查询对应的员工ID集合
     *
     * @param ids 机构岗位ID
     * @return 员工ID集合
     */
    List<String> findEmpByIds(List<String> ids);

    /**
     * 根据机构ID、岗位ID获得对应的机构岗位ID
     *
     * @param orgId      机构ID
     * @param positionId 岗位ID
     * @return 机构岗位ID
     */
    String queryId(String orgId, String positionId);
}
