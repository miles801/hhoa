package eccrm.base.org.dao;


import com.ycrl.utils.tree.PathTreeDao;
import eccrm.base.log.OperateType;
import eccrm.base.log.annotations.LogInfo;
import eccrm.base.org.bo.OrganizationBo;
import eccrm.base.org.domain.Organization;

import java.io.Serializable;
import java.util.Collection;
import java.util.List;

/**
 * Generated by yanhx on 2014-10-13.
 */

public interface OrganizationDao extends PathTreeDao<Organization, String> {

    /**
     * 保存，并更新上级的isParent的状态
     */
    @LogInfo(type = OperateType.ADD, describe = "机构-新增")
    String saveAndUpdateParent(Organization organization);

    /**
     * 保存
     */
    @LogInfo(type = OperateType.ADD, describe = "机构-新增")
    String save(Organization organization);

    @LogInfo(type = OperateType.MODIFY, describe = "机构-修改")
    void update(Organization organization);

    List<Organization> query(OrganizationBo bo);

    List<Organization> queryEffective(OrganizationBo bo);

    long getTotal(OrganizationBo bo);

    /**
     * 查询当前节点的所有子节点（包括隔代节点）
     * 不包括当前节点
     *
     * @param id 当前节点id
     */
    List<Organization> queryChildren(String id);

    /**
     * 查询指定id下的所有子节点的id
     *
     * @param id 不可为空
     */
    List<String> queryAllChildrenId(String id);

    Organization findById(String id);

    /**
     * 根据ID加载，启用了缓存
     */
    public Organization load(String id);

    @LogInfo(type = OperateType.DELETE, describe = "机构-删除")
    int deleteById(String id);

    long childSize(Serializable id);

    List<Organization> findByChildren(String s);

    /**
     * 带权限的高级查询
     * <p>该查询方法会经过数据权限的过滤</p>
     */
    List<Organization> permissionQuery(OrganizationBo bo);

    /**
     * 带权限的高级查询
     *
     * @param bo 高级查询对象
     * @return 符合条件的总记录数
     */
    Long permissionTotal(OrganizationBo bo);

    /**
     * 查询直接孩子节点（不包括节点节点）
     *
     * @param id 如果id为空，则查询根节点
     */
    public List<Organization> querySubChildren(String id);

    /**
     * 查询直接孩子节点，并支持其他条件的过滤
     * 该方法会使用分页查询
     *
     * @param id id 可为空，如果为空，则表示查询根
     * @param bo 其他查询条件，可为空
     */
    public List<Organization> querySubChildren(String id, OrganizationBo bo);

    /**
     * 重置是否为父节点
     *
     * @param id       当前的id
     * @param parentId 上级id，可为空
     */
    @LogInfo(type = OperateType.MODIFY, describe = "机构-重置上级机构状态")
    void resetIsParent(String id, String parentId);

    /**
     * 查询指定机构的所有孩子节点的id
     *
     * @param orgIds 机构id
     * @return 机构id
     */
    List<String> findAllChildrenIds(Collection<String> orgIds);

    Long getChildrenTotal(OrganizationBo bo);

    boolean isExit(String id);

    /**
     * 带权限的查询，只查询符合条件的第一级
     */
    List<Organization> permissionRootQuery();

}
