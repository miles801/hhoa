package eccrm.base.employee.service.impl;

import com.ycrl.core.SystemContainer;
import com.ycrl.core.beans.BeanHelper;
import com.ycrl.core.beans.BeanWrapCallback;
import com.ycrl.core.exception.NullParamException;
import com.ycrl.core.pager.PageVo;
import eccrm.base.employee.bo.BlankListBo;
import eccrm.base.employee.bo.EmployeeBo;
import eccrm.base.employee.dao.BlankListDao;
import eccrm.base.employee.dao.ContactMethodDao;
import eccrm.base.employee.dao.EmployeeDao;
import eccrm.base.employee.domain.BlankList;
import eccrm.base.employee.domain.ContactMethod;
import eccrm.base.employee.domain.Employee;
import eccrm.base.employee.service.ContactType;
import eccrm.base.employee.service.EmployeeOrgRelService;
import eccrm.base.employee.service.EmployeeService;
import eccrm.base.employee.vo.EmployeeVo;
import eccrm.base.org.dao.OrganizationDao;
import eccrm.base.org.domain.Organization;
import eccrm.base.parameter.service.ParameterContainer;
import eccrm.base.position.bo.PositionEmpBo;
import eccrm.base.position.dao.PositionDao;
import eccrm.base.position.dao.PositionEmpDao;
import eccrm.base.position.domain.Position;
import eccrm.base.position.domain.PositionEmp;
import eccrm.base.position.service.PositionEmpService;
import org.apache.commons.lang.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import javax.jws.WebMethod;
import java.util.ArrayList;
import java.util.List;

/**
 * Generated by yanhx on 2014-10-13.
 */

@Service("employeeServices")
public class EmployeeServiceImpl implements EmployeeService, BeanWrapCallback<Employee, EmployeeVo> {
    @Resource
    private EmployeeDao employeesDao;
    @Resource
    private PositionEmpDao positionEmpDao;
    @Resource
    private EmployeeOrgRelService employeeOrgRelService;
    @Resource
    private PositionEmpService positionEmpService;
    @Resource
    private PositionDao positionDao;

    @Resource
    private BlankListDao blankListDao;

    @Override
    public String save(Employee employee) {
        String id = employeesDao.save(employee);
        return id;
    }

    @Override
    public void update(Employee employee) {
        employeesDao.update(employee);
    }

    @Override
    public PageVo query(EmployeeBo bo) {
        PageVo vo = new PageVo();
        Long total = employeesDao.getTotal(bo);
        vo.setTotal(total);
        if (total == 0) return vo;
        List<Employee> employees = employeesDao.query(bo);
        vo.setData(BeanHelper.wrapList(employees, this));
        return vo;
    }

    @Override
    public PageVo queryValid(EmployeeBo bo) {
        PageVo vo = new PageVo();
        if (bo == null) {
            bo = new EmployeeBo();
        }
        bo.setValid(true);
        Long total = employeesDao.getTotal(bo);
        vo.setTotal(total);
        if (total == 0) return vo;
        List<Employee> employees = employeesDao.query(bo);
        vo.setData(BeanHelper.wrapList(employees, this));
        return vo;
    }

    @Override
    public List<EmployeeVo> querys(EmployeeBo bo) {
        List<PositionEmp> positionEmps = new ArrayList<PositionEmp>();
        List<Employee> employees = new ArrayList<Employee>();
        String ids = null;
        if (bo.getOrgId() != null || bo.getPositionId() != null) {
            PositionEmpBo positionEmpBo = new PositionEmpBo();
            if (bo.getOrgId() != null) {
                positionEmpBo.setOrgId(bo.getOrgId());
            }
            if (bo.getPositionId() != null) {
                positionEmpBo.setPositionId(bo.getPositionId());
            }
            positionEmps = positionEmpDao.query(positionEmpBo);
            if (positionEmps != null) {
                if (positionEmps.size() > 0) {
                    for (int i = 0; i < positionEmps.size(); i++) {
                        if (i != positionEmps.size() - 1) {
                            ids = "'" + positionEmps.get(i).getEmpId() + "',";
                        } else {
                            ids = "'" + positionEmps.get(i).getEmpId() + "'";
                        }
                    }
                    employees = employeesDao.querys(bo, ids);

                }
            } else {
                employees = null;
            }

        } else {
            employees = employeesDao.query(bo);

        }
        return BeanHelper.wrapList(employees, this);
    }

    @Override
    public EmployeeVo findById(String id) {
        return wrap(employeesDao.findById(id));
    }

    @Override
    public EmployeeVo findRTX(String extensionNumber) {
        return wrap(employeesDao.findByRtxId(extensionNumber));
    }

    @Override
    public EmployeeVo findByCode(String id) {
        return wrap(employeesDao.findByCode(id));
    }

    @Override
    public List<Employee> queryByOrgId(String id) {
        List<Employee> employeeList = employeeOrgRelService.findByOrgId(id);
        return employeeList;
    }

    @Override
    public List<EmployeeVo> queryByRuleId(String id, String orgId) {
        List<EmployeeVo> employeeList = positionEmpService.findByEmployee(id, orgId);
        return employeeList;
    }

    @Override
    public void deleteByIds(String... ids) {
        if (ids == null || ids.length == 0) return;
        for (String id : ids) {
            employeesDao.deleteById(id);
        }
    }

    @Override
    public EmployeeVo wrap(Employee employee) {
        if (employee == null) return null;
        // FIXME 这里存在性能问题
        EmployeeVo vo = new EmployeeVo();
        BeanUtils.copyProperties(employee, vo);
        if (employee.getOrgId() != null) {
            Organization organization = SystemContainer.getInstance().getBean(OrganizationDao.class).findById(employee.getOrgId());
            if (organization != null) {
                vo.setOrganizationId(organization.getId());
                vo.setOrganizationName(organization.getName());
            }
        }
        ParameterContainer parameterContainer = ParameterContainer.getInstance();
        if (!StringUtils.isBlank(vo.getDuty())) {//存在
            vo.setDutyName(parameterContainer.getBusinessName(ContactType.BP_ZHIW, vo.getDuty()));
        }
        if (!StringUtils.isBlank(vo.getWorkType())) {
            vo.setWorkTypeName(parameterContainer.getBusinessName(ContactType.BP_EMPTYPE, vo.getWorkType()));
        }
        if (!StringUtils.isBlank(vo.getStatus())) {
            vo.setStatusName(parameterContainer.getBusinessName("BP_YGZT", vo.getStatus()));
        }
        //联络方式中的字段转换
        if (employee.getId() != null) {

            ContactMethod contactMethod = SystemContainer.getInstance().getBean(ContactMethodDao.class)
                    .findById(employee.getId());
            if (contactMethod != null) {
                vo.setExtensionNumber(contactMethod.getAftAddr());
                String sup = contactMethod.getSupType();
                if (sup != null && "PHONE".equals(sup)) {

                    vo.setMobile(contactMethod.getAddress());
                } else if (sup != null && "EMAIL".equals(sup)) {
                    vo.setEmail(contactMethod.getAddress());
                }
            }
        }
        return vo;
    }

    @WebMethod
    @Override
    public EmployeeVo queryByMobile(String mobile) {
        EmployeeVo empVo = new EmployeeVo();
        if (!StringUtils.isBlank(mobile)) {
            throw new NullParamException("电话号码不能为空!");
        }
        //步骤1：根据号码到员工表中查询数据(临时表)
        EmployeeBo empBo = new EmployeeBo();
        empBo.setMobile(mobile);
        empBo.setStatus("2");
        List<Employee> empList = employeesDao.query(empBo);
        if (empList != null && empList.size() > 0) {
            Employee employee = empList.get(0);
            String empId = employee.getId();//员工id
            empVo.setId(empId);
            empVo.setEmployeeName(employee.getEmployeeName());
            empVo.setMobile(employee.getMobile());
            //步骤2：根据员工id到岗位员工中间表查询，因为要获取岗位表中id，和白名单中的岗位id匹配（循环匹配）
            List<EmployeeVo> employees = new ArrayList<EmployeeVo>();
            PositionEmpBo bo = new PositionEmpBo();
            bo.setEmpId(empId);
            List<PositionEmp> positionEmps = positionEmpDao.query(bo);
            if (positionEmps != null && positionEmps.size() > 0) {
                for (PositionEmp posEmp : positionEmps) {
                    String positionId = posEmp.getPositionId();//岗位id
                    //步骤3:根据岗位id查询，是否为白名单,如果blankList大于0是白名单
                    BlankListBo blankListBo = new BlankListBo();
                    blankListBo.setDutyId(positionId);
                    List<BlankList> blankList = blankListDao.query(blankListBo);//只会存在一个
                    if (blankList != null && blankList.size() > 0) {//该岗位是白名单
                        BlankList blank = blankList.get(0);
                        Position position = positionDao.findById(blank.getDutyId());
                        Organization organization = position.getOrganization();
                        empVo.setOrgId(organization.getId());
                        empVo.setIsBlank(true);
                        break;
                    }
                }
            } else {
                empVo.setIsBlank(false);
            }
        }
        return empVo;
    }

    @Override
    public void doCallback(Employee employee, EmployeeVo vo) {
        if (employee.getOrgId() != null) {
            Organization organization = SystemContainer.getInstance().getBean(OrganizationDao.class).findById(employee.getOrgId());
            if (organization != null) {
                vo.setOrganizationId(organization.getId());
                vo.setOrganizationName(organization.getName());
            }
        }
        ParameterContainer parameterContainer = ParameterContainer.getInstance();
        if (!StringUtils.isBlank(vo.getDuty())) {//存在
            vo.setDutyName(parameterContainer.getBusinessName(ContactType.BP_ZHIW, vo.getDuty()));
        }
        if (!StringUtils.isBlank(vo.getWorkType())) {
            vo.setWorkTypeName(parameterContainer.getBusinessName(ContactType.BP_EMPTYPE, vo.getWorkType()));
        }
        if (!StringUtils.isBlank(vo.getStatus())) {
            vo.setStatusName(parameterContainer.getSystemName(ContactType.CONT_TYPE_STATUS, vo.getStatus()));
        }
        //联络方式中的字段转换
        if (employee.getId() != null) {

            ContactMethod contactMethod = SystemContainer.getInstance().getBean(ContactMethodDao.class)
                    .findById(employee.getId());
            if (contactMethod != null) {
                vo.setExtensionNumber(contactMethod.getAftAddr());
                String sup = contactMethod.getSupType();
                if (sup != null && "PHONE".equals(sup)) {

                    vo.setMobile(contactMethod.getAddress());
                } else if (sup != null && "EMAIL".equals(sup)) {
                    vo.setEmail(contactMethod.getAddress());
                }
            }
        }
    }

    @Override
    public boolean isExists(String rtxId) {
        return employeesDao.isExists(rtxId);
    }

    @Override
    public String findNameById(String employeeId) {
        return employeesDao.findNameById(employeeId);
    }

    @Override
    public Employee findById2(String employID) {
        return employeesDao.findById(employID);
    }

    @Override
    public PageVo permissionPageQuery(EmployeeBo bo) {
        if (bo == null) {
            bo = new EmployeeBo();
        }
        bo.setPermission(true);
        return query(bo);
    }
}
