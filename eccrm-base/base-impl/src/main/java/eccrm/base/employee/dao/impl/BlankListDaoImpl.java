package eccrm.base.employee.dao.impl;

import com.ycrl.core.HibernateDaoHelper;
import com.ycrl.core.pager.Pager;
import eccrm.base.employee.bo.BlankListBo;
import eccrm.base.employee.dao.BlankListDao;
import eccrm.base.employee.domain.BlankList;
import eccrm.base.employee.domain.Employee;
import eccrm.base.org.domain.Organization;
import eccrm.base.position.domain.PositionEmp;
import org.apache.commons.lang3.StringUtils;
import org.hibernate.Criteria;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.criterion.Example;
import org.hibernate.criterion.MatchMode;
import org.springframework.stereotype.Repository;

import java.util.ArrayList;
import java.util.List;


/**
 * Generated by liuxq on 2014-10-22.
 */

@Repository("blankListDao")
public class BlankListDaoImpl extends HibernateDaoHelper implements BlankListDao {

    @Override
    public String save(BlankList blankList) {
        return (String) getSession().save(blankList);
    }

    @Override
    public void update(BlankList blankList) {
        getSession().update(blankList);
    }

    @Override
    public List<BlankList> query(BlankListBo bo) {
        Criteria criteria = getDefaultCriteria(bo);
        return criteria.list();
    }

    @Override
    public long getTotal(BlankListBo bo) {
        Criteria criteria = createRowCountsCriteria(BlankList.class);
        initCriteria(criteria, bo);
        return (Long) criteria.uniqueResult();
    }


    @Override
    public int deleteById(String id) {
        return getSession().createQuery("delete from BlankList where id=?")
                .setParameter(0, id)
                .executeUpdate();
    }

    @Override
    public BlankList findById(String id) {
        return (BlankList) getSession().get(BlankList.class, id);
    }

    /**
     * 获得默认的org.hibernate.Criteria对象,并根据bo进行初始化（如果bo为null，则会新建一个空对象）
     * 为了防止新的对象中有数据，建议实体/BO均采用封装类型
     */
    private Criteria getDefaultCriteria(BlankListBo bo) {
        Criteria criteria = createCriteria(BlankList.class);
        initCriteria(criteria, bo);
        return criteria;
    }

    /**
     * 根据BO初始化org.hibernate.Criteria对象
     * 如果org.hibernate.Criteria为null，则抛出异常
     * 如果BO为null，则新建一个空的对象
     */
    private void initCriteria(Criteria criteria, BlankListBo bo) {
        if (criteria == null) {
            throw new IllegalArgumentException("criteria must not be null!");
        }
        if (bo == null) bo = new BlankListBo();
        criteria.add(Example.create(bo).enableLike(MatchMode.ANYWHERE).ignoreCase());
    }

    @Override
    @SuppressWarnings("unchecked")
    public List<Employee> queryEmployees(BlankListBo bo) {
        if (bo == null) {
            return null;
        }
        Query query = wrapBlankListEmployeeParam(bo, false);

        // 设置分页信息
        if (Pager.getLimit() != null) {
            query.setMaxResults(Pager.getLimit());
        }
        if (Pager.getStart() != null) {
            query.setFirstResult(Pager.getStart());
        }
        List<Employee> employees = query.list();
        return employees;
    }

    private Query wrapBlankListEmployeeParam(BlankListBo bo, boolean total) {
        // 从白名单中查询所有的岗位id
        String positionHQL = "select distinct bl.dutyId from " + BlankList.class.getName() + " bl ";
        // 获得所有的员工ID
        String empHQL = "select pe.empId from " + PositionEmp.class.getName() + " pe where pe.positionId in(" + positionHQL + ")";

        // 过滤员工
        StringBuilder hql = new StringBuilder();
        if (total) {
            hql.append("select count(e.id) ");
        }
        hql.append(" from ").append(Employee.class.getName()).append(" e where e.id in(").append(empHQL).append(") ");
        List<Object> params = new ArrayList<Object>();
        if (StringUtils.isNotEmpty(bo.getEmpName())) {
            hql.append(" and e.employeeName like ? ");
            params.add("%" + bo.getEmpName() + "%");
        }
        if (StringUtils.isNotEmpty(bo.getEmpNo())) {
            hql.append(" and e.employeeCode like ? ");
            params.add("%" + bo.getEmpNo() + "%");
        }
        if (StringUtils.isNotEmpty(bo.getOrgId())) {
            hql.append(" and e.orgId = ? ");
            params.add(bo.getOrgId());
        }
        if (StringUtils.isNotEmpty(bo.getExtensionNumber())) {
            hql.append(" and e.extensionNumber = ? ");
            params.add(bo.getExtensionNumber());
        }
        if (StringUtils.isNotEmpty(bo.getTel())) {
            hql.append(" and e.mobile = ? ");
            params.add(bo.getTel());
        }
        Session session = getSession();

        // 查询员工信息
        Query query = session.createQuery(hql.toString());
        for (int i = 0; i < params.size(); i++) {
            query.setParameter(i, params.get(i));
        }
        return query;
    }


    @Override
    public long getEmployeesCount(BlankListBo bo) {
        if (bo == null) {
            return 0;
        }
        // 查询所有符合条件的员工ID
        Query query = wrapBlankListEmployeeParam(bo, true);

        long result = (Long) query.uniqueResult();
        return result;
    }

    @Override
    @SuppressWarnings("unchecked")
    public List<Organization> queryBlankListEmpDept(String empId) {
        // 查询白名单岗位
        String positionId = "select bl.dutyId from " + BlankList.class.getName() + " bl ";
        // 查询组织机构岗位员工表中匹配岗位和员工的组织机构
        String hql = "select pe.org from " + PositionEmp.class.getName() + " pe where pe.positionId in(" + positionId + ") and pe.empId=?";
        return getSession().createQuery(hql)
                .setParameter(0, empId)
                .list();
    }
}