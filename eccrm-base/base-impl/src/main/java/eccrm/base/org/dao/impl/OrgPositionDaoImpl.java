package eccrm.base.org.dao.impl;


import com.ycrl.base.common.CommonStatus;
import com.ycrl.core.HibernateDaoHelper;
import com.ycrl.core.exception.Argument;
import com.ycrl.core.pager.Pager;
import eccrm.base.org.bo.OrgPositionBo;
import eccrm.base.org.dao.OrgPositionDao;
import eccrm.base.org.domain.OrgPosition;
import eccrm.base.position.domain.Position;
import org.apache.commons.lang3.StringUtils;
import org.hibernate.Criteria;
import org.hibernate.Query;
import org.hibernate.criterion.Example;
import org.hibernate.criterion.MatchMode;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.springframework.stereotype.Repository;

import java.util.List;


/**
 * Generated by yanhx on 2014-10-13.
 */
@SuppressWarnings("ALL")
@Repository("orgPositionDao")
public class OrgPositionDaoImpl extends HibernateDaoHelper implements OrgPositionDao {

    @Override
    public String save(OrgPosition organization) {
        return (String) getSession().save(organization);
    }

    @Override
    public void update(OrgPosition organization) {
        getSession().update(organization);
    }

    @Override
    public List<OrgPosition> query(OrgPositionBo bo) {
        Criteria criteria = getDefaultCriteria(bo);
        return criteria.list();
    }

    @Override
    public Long getTotal(OrgPositionBo bo) {
        Criteria criteria = createRowCountsCriteria(OrgPosition.class);
        initCriteria(criteria, bo);
        return (Long) criteria.uniqueResult();
    }


    @Override
    public int deleteById(String id) {
        return getSession().createQuery("delete from OrgPosition where id=?")
                .setParameter(0, id)
                .executeUpdate();
    }

    @Override
    public int deleteByRoleId(OrgPositionBo bo) {
        return getSession().createQuery("delete from OrgPosition where roleId=? and orgId=?")
                .setParameter(0, bo.getRoleId())
                .setParameter(1, bo.getOrgId())
                .executeUpdate();
    }

    @Override
    public List<OrgPosition> querys(OrgPositionBo bo) {
        Criteria criteria = createCriteria(OrgPosition.class);
        criteria.setMaxResults(Integer.MAX_VALUE - 1);
        criteria.setFirstResult(0);
        initCriteria(criteria, bo);
        return criteria.list();
    }

    @Override
    public boolean isExit(String orgId, String positionId) {
        Argument.isEmpty(orgId, "查询当前机构岗位时，机构id不能为空!");
        Argument.isEmpty(positionId, "查询当前机构岗位时，岗位id不能为空!");
        Criteria criteria = createRowCountsCriteria(OrgPosition.class);
        criteria.add(Restrictions.eq("orgId", orgId));
        criteria.add(Restrictions.eq("roleId", positionId));
        Long count = (Long) criteria.uniqueResult();
        return count <= 0 ? true : false;
    }

    @Override
    public OrgPosition findById(String id) {
        return (OrgPosition) getSession().get(OrgPosition.class, id);
    }


    /**
     * 获得默认的org.hibernate.Criteria对象,并根据bo进行初始化（如果bo为null，则会新建一个空对象）
     * 为了防止新的对象中有数据，建议实体/BO均采用封装类型
     */
    private Criteria getDefaultCriteria(OrgPositionBo bo) {
        Criteria criteria = createCriteria(OrgPosition.class);
        initCriteria(criteria, bo);
        return criteria;
    }

    /**
     * 根据BO初始化org.hibernate.Criteria对象
     * 如果org.hibernate.Criteria为null，则抛出异常
     * 如果BO为null，则新建一个空的对象
     */
    private void initCriteria(Criteria criteria, OrgPositionBo bo) {
        if (criteria == null) {
            throw new IllegalArgumentException("criteria must not be null!");
        }
        if (bo == null) bo = new OrgPositionBo();
        criteria.add(Example.create(bo).enableLike(MatchMode.ANYWHERE).ignoreCase());

    }

    @Override
    public OrgPosition queryByRoleId(String code) {
        Argument.isEmpty(code, "岗位编号不能为空!");
        Criteria criteria = getDefaultCriteria(null);
        Criteria criteriaContact = createCriteria(Position.class);
        criteriaContact.add(Restrictions.eq("code", code));
        criteriaContact.add(Restrictions.eq("status", CommonStatus.ACTIVE.getValue()));
        criteriaContact.setProjection(Projections.property("id"));
        List<String> associatedIds = criteriaContact.list();
        if(associatedIds != null && associatedIds.size()>0){
            criteria.add(Restrictions.in("roleId",associatedIds));
        }else {
            criteria.add(Restrictions.eq("roleId","@#@!&"));
        }
        List<OrgPosition> orgPositions = criteria.list();
        if(orgPositions != null && orgPositions.size()>0){
            return  orgPositions.get(0);
        }
        return null;
    }

    @Override
    public List<String> whoHasPosition() {
        return createCriteria(OrgPosition.class)
                .setProjection(Projections.distinct(Projections.property("orgId")))
                .list();
    }

    @Override
    public List<Position> queryByOrgId(String orgId) {
        if (StringUtils.isBlank(orgId)) {
            return null;
        }
        String subHql = "select distinct op.roleId from " + OrgPosition.class.getName() + " op where op.orgId=?";
        Query query = getSession().createQuery("from " + Position.class.getName() + " p where p.id in(" + subHql + ")")
                .setParameter(0, orgId);
        if (Pager.getStart() != null) {
            query.setFirstResult(Pager.getStart());
        }
        if (Pager.getLimit() != null) {
            query.setMaxResults(Pager.getLimit());
        }
        return query.list();
    }

}