package eccrm.base.org.service.impl;


import com.ycrl.base.common.CommonStatus;
import com.ycrl.core.SystemContainer;
import com.ycrl.core.beans.BeanHelper;
import com.ycrl.core.beans.BeanWrapBuilder;
import com.ycrl.core.exception.SaveException;
import com.ycrl.core.pager.PageVo;
import com.ycrl.core.pager.Pager;
import com.ycrl.utils.string.StringUtils;
import eccrm.base.org.bo.OrgPositionBo;
import eccrm.base.org.dao.OrgPositionDao;
import eccrm.base.org.domain.OrgPosition;
import eccrm.base.org.service.OrgPositionService;
import eccrm.base.org.vo.OrgPositionVo;
import eccrm.base.position.bo.PositionBo;
import eccrm.base.position.dao.PositionDao;
import eccrm.base.position.domain.Position;
import eccrm.base.position.service.PositionService;
import eccrm.base.position.vo.PositionVo;
import org.springframework.beans.BeanUtils;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import java.util.ArrayList;
import java.util.List;

/**
 * Generated by yanhx on 2014-10-13.
 */

@Service("orgPositionService")
public class OrgPositionServiceImpl implements OrgPositionService {
    @Resource
    private OrgPositionDao orgPositionDao;

    @Resource
    private PositionService positionService;

    @Override
    public String save(OrgPosition orgPosition) throws Exception {
        if (orgPosition == null) return null;
        String orgId = orgPosition.getOrgId();
        String id = null;
        String positionId = orgPosition.getRoleId();
        if (orgId != null && positionId != null) {
            if (orgPositionDao.isExit(orgId, positionId)) {
                id = orgPositionDao.save(orgPosition);
            } else {
                throw new SaveException("该机构下已经有了这个岗位！请勿重复添加");
            }
        }
        return id;
    }

    @Override
    public void update(OrgPosition orgPosition) {

        orgPositionDao.update(orgPosition);
    }

    @Override
    public PageVo query(OrgPositionBo bo) {
        PageVo vo = new PageVo();
        Long total = orgPositionDao.getTotal(bo);
        vo.setTotal(total);
        if (total == 0) return vo;

        List<OrgPosition> orgPosition = orgPositionDao.query(bo);
        vo.setData(BeanHelper.wrapList(orgPosition, this));
        return vo;
    }

    @Override
    public List<PositionVo> queryByOrgId(String orgId) {
        List<Position> positions = orgPositionDao.queryByOrgId(orgId);
        return BeanWrapBuilder.newInstance()
                .addProperties(new String[]{"id", "name"})
                .wrapList(positions, PositionVo.class);
    }

    @Override
    public PageVo pageQueryByOrgId(String orgId) {
        OrgPositionBo bo = new OrgPositionBo();
        bo.setOrgId(orgId);
        PageVo page = new PageVo();
        Long total = orgPositionDao.getTotal(bo);
        page.setTotal(total);
        if (total == null || total < 1) {
            return page;
        }
        List<Position> positions = orgPositionDao.queryByOrgId(orgId);
        page.setData(BeanWrapBuilder.newInstance()
                .wrapList(positions, PositionVo.class));
        return page;
    }

    @Override
    public PageVo queryByOrgIdforTree(String orgId) {
        OrgPositionBo orgPositionBo = new OrgPositionBo();
        orgPositionBo.setOrgId(orgId);
        List<OrgPosition> orgPositions = orgPositionDao.querys(orgPositionBo);
        PageVo vo = new PageVo();
        Integer start = Pager.getStart();
        Integer limit = Pager.getLimit();

        List<PositionVo> positions = new ArrayList<PositionVo>();
        if (orgPositions != null && orgPositions.size() > 0) {

            for (int i = 0; i < orgPositions.size(); i++) {
                if (orgPositions.get(i).getRoleId() != null) {
                    PositionVo p = positionService.findById(orgPositions.get(i).getRoleId());
                    if (p != null) {
                        positions.add(p);
                    }
                }

            }


        }
        vo.setData(positions);
        vo.setTotal((long) orgPositions.size());
        return vo;
    }

    @Override
    public OrgPositionVo findById(String id) {
        return wrap(orgPositionDao.findById(id));
    }


    @Override
    public void deleteByIds(String... ids) {
        if (ids == null || ids.length == 0) return;
        for (String id : ids) {
            orgPositionDao.deleteById(id);
        }
    }

    @Override
    public void deleteByRoleId(OrgPositionBo bo) {

        orgPositionDao.deleteByRoleId(bo);

    }

    @Override
    public List<PositionVo> queryAll(OrgPositionBo bo) {
        List<OrgPosition> orgPositions = orgPositionDao.query(bo);
        List<PositionVo> positions = new ArrayList<PositionVo>();
        if (orgPositions != null) {
            for (OrgPosition orgPosition : orgPositions) {
                if (orgPosition.getRoleId() != null) {
                    PositionVo p = positionService.findById(orgPosition.getRoleId());
                    if (p != null) {
                        positions.add(p);
                    }
                }

            }
        }
        return positions;
    }

    public OrgPositionVo wrap(OrgPosition orgnization) {
        if (orgnization == null) return null;
        OrgPositionVo vo = new OrgPositionVo();
        BeanUtils.copyProperties(orgnization, vo);
        return vo;
    }

    @Override
    public OrgPositionVo queryValidByCode(String code) {
        OrgPosition orgPosition = orgPositionDao.queryByRoleId(code);
        return wrap(orgPosition);
    }
    @Override
    public List<String> whoHasPosition() {
        return orgPositionDao.whoHasPosition();
    }
}
