package eccrm.base.org.dao.impl;


import com.ycrl.core.HibernateDaoHelper;
import com.ycrl.core.exception.Argument;
import com.ycrl.core.hibernate.filter.FilterFieldType;
import eccrm.base.org.bo.OrganizationBo;
import eccrm.base.org.dao.OrganizationDao;
import eccrm.base.org.domain.Organization;
import eccrm.base.region.domain.Region;
import org.apache.commons.lang3.StringUtils;
import org.hibernate.Criteria;
import org.hibernate.Query;
import org.hibernate.criterion.*;
import org.springframework.stereotype.Repository;

import java.io.Serializable;
import java.util.*;


/**
 * Generated by yanhx on 2014-10-13.
 */
@SuppressWarnings("ALL")
@Repository("organizationDao")
public class OrganizationDaoImpl extends HibernateDaoHelper implements OrganizationDao {

    // 数据权限的过滤器名称
    public static final String PERMISSION_QUERY_ORG = "QUERY_ORG";

    @Override
    public String saveAndUpdateParent(Organization organization) {
        String id = (String) getSession().save(organization);
        String parentId = getParentId(organization);
        resetIsParent(id, parentId);
        return id;
    }

    @Override
    public String save(Organization organization) {
        getSession().saveOrUpdate(organization);
        return organization.getId();
    }

    private String getParentId(Organization organization) {
        String parentId = organization.getParentId();
        if (StringUtils.isBlank(parentId) && organization.getParent() != null) {
            parentId = organization.getParent().getId();
        }
        return parentId;
    }

    @Override
    public void update(Organization organization) {
        getSession().merge(organization);
        String parentId = queryParentId(organization.getId());
        resetIsParent(organization.getId(), parentId);
    }

    private String queryParentId(String id) {
        return (String) getSession().createCriteria(Organization.class)
                .setProjection(Projections.property("parentId"))
                .add(Restrictions.idEq(id))
                .uniqueResult();
    }

    @Override
    public List<Organization> query(OrganizationBo bo) {
        Criteria criteria = getDefaultCriteria(bo);
        return criteria.list();
    }

    @Override
    public List<Organization> queryChildren(String id) {
        Argument.isEmpty(id, "查询当前节点的所有子节点时，id不能为空!");
        Criteria criteria = getDefaultCriteria(null);
        criteria.add(Restrictions.like("path", "/" + id + "/", MatchMode.ANYWHERE))
                .add(Restrictions.ne("id", id));

        return criteria.list();
    }

    @Override
    public Long getChildrenTotal(OrganizationBo bo) {
        Argument.isEmpty(bo.getId(), "查询当前节点的所有子节点时，id不能为空!");
        Criteria criteria = createRowCountsCriteria(Organization.class);
        criteria.add(Restrictions.like("path", "/" + bo.getId() + "/", MatchMode.ANYWHERE));
        return (Long) criteria.uniqueResult();
    }

    @Override
    public boolean isExit(String id) {
        Argument.isEmpty(id, "查询当前机构时，机构id不能为空!");
        Criteria criteria = createRowCountsCriteria(Organization.class);
        criteria.add(Restrictions.eq("id", id));
        Long count = (Long) criteria.uniqueResult();
        return count <= 0 ? true : false;
    }

    @Override
    public List<Organization> queryEffective(OrganizationBo bo) {
        StringBuffer sql = new StringBuffer();
        sql.append("select * from ORGNIZATION t where orgPath NOT IS NULL ");
        if (bo.getName() != null || !("".equals(bo.getName()))) {
            sql.append(" and name like '%" + bo.getName() + "%'");
        }
        sql.append(" order by sequenceNo ");
        Query query = getSession().createSQLQuery(sql.toString());
        return (List<Organization>) query.list();
    }

    @Override
    public long getTotal(OrganizationBo bo) {
        Criteria criteria = createRowCountsCriteria(Organization.class);
        initCriterias(criteria, bo);
        return (Long) criteria.uniqueResult();
    }


    @Override
    public int deleteById(String id) {
        String oldParentId = queryParentId(id);
        getSession().createQuery("delete from Organization where id=?")
                .setParameter(0, id)
                .executeUpdate();
        resetIsParent(oldParentId, null);
        return 1;
    }

    @Override
    public long childSize(Serializable id) {
        return (Long) createRowCountsCriteria(Region.class)
                .add(Restrictions.eq("parent.id", id))
                .uniqueResult();
    }

    @Override
    public List<Organization> findByChildren(String id) {
        Argument.isEmpty(id, "查询当前节点的所有子节点时，id不能为空!");
        Criteria criteria = getDefaultCriteria(null);
        criteria.add(Restrictions.like("path", "/" + id + "/", MatchMode.ANYWHERE));
        criteria.add(Restrictions.ne("id", id));
        return criteria.list();
    }

    @Override
    public List<String> queryAllChildrenId(String id) {
        Argument.isEmpty(id, "查询当前节点的所有子节点时，id不能为空!");
        Criteria criteria = createCriteria(Organization.class);
        criteria.setProjection(Projections.id())
                .add(Restrictions.like("fullPath", "/" + id + "/", MatchMode.ANYWHERE))
                .add(Restrictions.ne("id", id));
        return criteria.list();
    }

    @Override
    public Organization findById(String id) {
        return (Organization) getSession().createQuery("from " + Organization.class.getName() + " o where o.id=?")
                .setParameter(0, id)
                .setMaxResults(1)
                .uniqueResult();
    }

    public Organization load(String id) {
        return (Organization) getSession().load(Organization.class, id);
    }


    /**
     * 获得默认的org.hibernate.Criteria对象,并根据bo进行初始化（如果bo为null，则会新建一个空对象）
     * 为了防止新的对象中有数据，建议实体/BO均采用封装类型
     */
    private Criteria getDefaultCriteria(OrganizationBo bo) {
        Criteria criteria = createCriteria(Organization.class);
        initCriteria(criteria, bo);
        return criteria;
    }


    /**
     * 根据BO初始化org.hibernate.Criteria对象
     * 如果org.hibernate.Criteria为null，则抛出异常
     * 如果BO为null，则新建一个空的对象
     */
    private void initCriteria(Criteria criteria, OrganizationBo bo) {
        if (criteria == null) {
            throw new IllegalArgumentException("criteria must not be null!");
        }
        if (bo == null) bo = new OrganizationBo();
        criteria.add(
                Example.create(bo).enableLike(MatchMode.START)
                        .excludeProperty("status")
                        .excludeProperty("parentId")
        );

        if (StringUtils.isNotBlank(bo.getParentId())) {
            criteria.add(Restrictions.eq("parentId", bo.getParentId()));
        }
        if (StringUtils.isNotBlank(bo.getStatus())) {
            criteria.add(Restrictions.eq("status", bo.getStatus()));
        }
        // 查询根
        if (bo.getRoot() != null && bo.getRoot()) {
            criteria.add(Restrictions.isNull("parentId"));
        }
    }

    /**
     * 根据BO初始化org.hibernate.Criteria对象
     * 如果org.hibernate.Criteria为null，则抛出异常
     * 如果BO为null，则新建一个空的对象
     */
    private void initCriterias(Criteria criteria, OrganizationBo bo) {
        if (criteria == null) {
            throw new IllegalArgumentException("criteria must not be null!");
        }
        if (bo == null) bo = new OrganizationBo();
        criteria.add(Example.create(bo).enableLike(MatchMode.ANYWHERE).ignoreCase());

    }

    @Override
    public void resetIsParent(String id, String parentId) {
        // 判断当前节点是否为上级
        if (StringUtils.isNotBlank(id)) {
            Long count = (Long) getSession().createCriteria(Organization.class)
                    .setProjection(Projections.rowCount())
                    .add(Restrictions.eq("parentId", id))
                    .uniqueResult();
            Query query = getSession().createQuery("update " + Organization.class.getName() + " o set o.isParent=? where o.id=?");
            if (count != null && count > 0) {
                query.setParameter(0, true)
                        .setParameter(1, id);
            } else {
                query.setParameter(0, false)
                        .setParameter(1, id);
            }
            query.executeUpdate();
        }

        // 判断之前的上级节点现在是否还有
        if (StringUtils.isNotBlank(parentId)) {
            resetIsParent(parentId, null);
        }
    }

    @Override
    @SuppressWarnings("unchecked")
    public List<Organization> querySubChildren(String id) {
        return querySubChildren(id, null);
    }

    @Override
    public List<Organization> querySubChildren(String id, OrganizationBo bo) {
        Criteria criteria = getSession().createCriteria(Organization.class);
        if (bo != null) {
            criteria.add(Example.create(bo).enableLike(MatchMode.ANYWHERE)
                    .excludeProperty("parentId"));
        }
        if (StringUtils.isBlank(id)) {
            criteria.add(Restrictions.isNull("parentId"));
        } else {
            criteria.add(Restrictions.eq("parentId", id));
        }
        criteria.addOrder(Order.asc("sequenceNo"));
        return criteria.list();
    }

    @Override
    public List<String> findAllChildrenIds(Collection<String> orgIds) {
        if (orgIds == null || orgIds.isEmpty()) {
            return null;
        }
        String hql = "select distinct o.id from " + Organization.class.getName() + " o where 1=1 and (";
        int i = 0;
        for (String id : orgIds) {
            if (i == 0) {
                hql += " o.path like '%/" + id + "/%'";
            } else {
                hql += " or o.path like '%/" + id + "/%'";
            }
            i++;
        }
        hql += ")";
        return getSession().createQuery(hql)
                .list();
    }

    private Criterion getNextCriterion(Iterator<String> iterator) {
        if (iterator == null || !iterator.hasNext()) {
            return Restrictions.idEq("_");
        }
        String value = iterator.next();
        return Restrictions.or(Restrictions.like("path", "%/" + value + "/%"), getNextCriterion(iterator));
    }


    @Override
    public Long permissionTotal(OrganizationBo bo) {
        Criteria criteria = createRowCountsCriteria(Organization.class, PERMISSION_QUERY_ORG, "id", FilterFieldType.ORG);
        initCriteria(criteria, bo);
        return (Long) criteria.uniqueResult();
    }

    @Override
    public List<Organization> permissionQuery(OrganizationBo bo) {
        Criteria criteria = createCriteria(Organization.class, PERMISSION_QUERY_ORG, "id", FilterFieldType.ORG);
        initCriteria(criteria, bo);
        criteria.addOrder(Order.asc("pinyin"));
        return criteria.list();
    }

    @Override
    public List<Organization> permissionRootQuery() {
        Criteria criteria = createCriteria(Organization.class, PERMISSION_QUERY_ORG, "id", FilterFieldType.ORG);
        initCriteria(criteria, null);
        criteria.addOrder(Order.desc("path"));
        List<Organization> orgs = criteria.list();
        if (orgs == null || orgs.isEmpty()) {
            return null;
        }
        // 过滤掉子机构，只返回根
        // 根据PATH进行过滤（path是先进行了排序的，根path在前面）
        // 如果后面的元素的path是以集合中的元素的path开头的，则视为子机构
        List<Organization> filterList = new ArrayList<Organization>();
        Set<String> paths = new HashSet<String>();
        int size = orgs.size() - 1;
        for (int i = size; i > -1; i--) {
            String path = orgs.get(i).getPath();
            boolean has = false;
            for (String foo : paths) {
                if (path.startsWith(foo)) {
                    has = true;
                    break;
                }
            }

            if (!has) {
                paths.add(path);
                filterList.add(orgs.get(i));
            }
        }
        return filterList;
    }
}