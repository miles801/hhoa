package eccrm.base.org.service.impl;


import com.ycrl.core.SystemContainer;
import com.ycrl.core.beans.BeanWrapBuilder;
import com.ycrl.core.beans.BeanWrapCallback;
import com.ycrl.core.pager.PageVo;
import com.ycrl.utils.tree.PathTreeBuilder;
import com.ycrl.utils.tree.TreeFactory;
import eccrm.base.org.bo.OrganizationBo;
import eccrm.base.org.dao.OrganizationDao;
import eccrm.base.org.domain.OrgPosition;
import eccrm.base.org.domain.Organization;
import eccrm.base.org.service.OrgPositionService;
import eccrm.base.org.service.OrganizationService;
import eccrm.base.org.vo.OrganizationVo;
import eccrm.base.parameter.service.ParameterContainer;
import eccrm.base.position.bo.PositionParamBo;
import eccrm.base.position.dao.PositionParamDao;
import eccrm.base.position.domain.Position;
import eccrm.base.position.domain.PositionParam;
import eccrm.base.region.service.RegionService;
import eccrm.base.region.vo.RegionVo;
import eccrm.core.exception.SaveException;
import org.apache.commons.lang.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import javax.persistence.EntityNotFoundException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * Generated by yanhx on 2014-10-13.
 */

@Service("organizationService")
public class OrganizationServiceImpl implements OrganizationService, BeanWrapCallback<Organization, OrganizationVo> {
    @Resource
    private OrganizationDao organizationDao;
    @Resource
    private OrgPositionService orgPositionService;

    @Override
    public String save(Organization organization) {
        if (organization.getParentId() != null) {
            Organization parent = new Organization();
            parent.setId(organization.getParentId());
            organization.setParent(parent);
        }
        organization.setPath("/");//设置一个默认的path
        if (organization.getParent() != null && StringUtils.isEmpty(organization.getParent().getId())) {
            organization.setParent(null);
        }
        String id = null;
        if (organization.getId() != null && organizationDao.isExit(organization.getId())) {
            id = organizationDao.saveAndUpdateParent(organization);
            PathTreeBuilder.buildAfterSave(organizationDao, organization);
        }

        // 设置isParent
        return id;
    }


    @Override
    public void update(Organization organization) {
        if (organization.getParentId() != null) {
            Organization parent = new Organization();
            parent.setId(organization.getParentId());
            organization.setParent(parent);
        }
        PathTreeBuilder.buildBeforeUpdate(organizationDao, organization);
        if (organization.getParent() != null && StringUtils.isEmpty(organization.getParent().getId())) {
            organization.setParent(null);
        }
        organizationDao.update(organization);
    }

    @Override
    public PageVo query(OrganizationBo bo) {
        PageVo vo = new PageVo();
        Long total = organizationDao.getTotal(bo);
        vo.setTotal(total);
        if (total == 0) return vo;

        List<Organization> organization = organizationDao.query(bo);
        List<Organization> trees = TreeFactory.buildTree(organization, Organization.class);
        vo.setData(wrapList(trees));

        return vo;
    }

    @Override
    public PageVo queryAll(OrganizationBo bo) {
//        OrganizationBo bo = new OrganizationBo();
        PageVo vo = new PageVo();
        bo.setStatus("1");
        List<Organization> organization = organizationDao.query(bo);
        if (organization != null) {
            List<OrganizationVo> organizationVos = BeanWrapBuilder.newInstance().wrapList(organization, OrganizationVo.class);

            vo.setData(organizationVos);
        }
        return vo;
    }

    @Override
    public OrganizationVo findById(String id) {
        Organization organization = organizationDao.findById(id);
        return BeanWrapBuilder.newInstance().setCallback(this)
                .wrap(organization, OrganizationVo.class);
    }


    @Override
    public void deleteByIds(String... ids) {
        if (ids == null || ids.length == 0) return;
        for (String id : ids) {
            Organization organization = organizationDao.findById(id);
            if (organization == null) {
                throw new EntityNotFoundException(id);
            }
            if (!("0".equals(organization.getStatus()))) {
                organization.setStatus("0");
                organizationDao.update(organization);
            } else {
                organizationDao.deleteById(id);
            }

        }
    }

    @Override
    public boolean addPostion(String id) throws Exception {
        Organization organization = organizationDao.findById(id);
        try {
            if (organization != null) {
                PositionParamBo positionParamBo = new PositionParamBo();
                positionParamBo.setBusiType(organization.getBusiTypeId());
                positionParamBo.setOrgType(organization.getOrgType());
                List<PositionParam> positionParams = SystemContainer.getInstance().getBean(PositionParamDao.class).query(positionParamBo);
                if (positionParams != null && positionParams.size() > 0) {
                    for (PositionParam positionParam : positionParams) {
                        if (positionParam != null) {
                            Position position = positionParam.getPosition();
                            if (position != null && position.getId() != null) {
                                OrgPosition orgPosition1 = new OrgPosition();
                                orgPosition1.setOrgId(id);
                                orgPosition1.setRoleId(position.getId());
                                try {
                                    orgPositionService.save(orgPosition1);
                                } catch (Exception e) {
                                    throw new com.ycrl.core.exception.SaveException("保存：" + e);
                                }

                            }
                        }
                    }
                } else {
                    return false;
                }
            } else {
                throw new IllegalArgumentException("机构不能为空!");
            }
        } catch (Exception e) {
            throw new SaveException("没有匹配到岗位！" + e);
        }
        return true;
    }


    @Override
    public List<OrganizationVo> tree(OrganizationBo bo) {
        List<Organization> organizations = organizationDao.query(bo);
        List<Organization> trees = TreeFactory.buildTree(organizations, Organization.class);
        return BeanWrapBuilder.newInstance().setCallback(this)
                .addProperties(new String[]{"id", "name", "children"})
                .wrapList(trees, OrganizationVo.class);
    }

    @Override
    public List<OrganizationVo> trees() {
        OrganizationBo bo = new OrganizationBo();
        bo.setStatus("1");
        List<Organization> organizations = organizationDao.query(bo);
        List<Organization> trees = TreeFactory.buildTree(organizations, Organization.class);
        List<OrganizationVo> organizationVoList = BeanWrapBuilder.newInstance().setCallback(this)
                .addProperties(new String[]{"id", "name", "children"})
                .wrapList(trees, OrganizationVo.class);

        return BeanWrapBuilder.newInstance().setCallback(this)
                .addProperties(new String[]{"id", "name", "children"})
                .wrapList(trees, OrganizationVo.class);
    }

    @Override
    public PageVo queryAllChildren(String id) {
        PageVo vo = new PageVo();
        OrganizationBo bo = new OrganizationBo();
        if (id != null) {
            bo.setId(id);
        }
        Long total = organizationDao.getChildrenTotal(bo);
        vo.setTotal(total);
        if (total == 0) return vo;
        List<Organization> organizations = organizationDao.queryChildren(id);
        vo.setData(BeanWrapBuilder.newInstance().setCallback(this)
                .wrapList(organizations, OrganizationVo.class));
        return vo;
    }

    public List<OrganizationVo> wrapList(List<Organization> orgnizations) {
        if (orgnizations == null) return null;
        List<OrganizationVo> vos = new ArrayList<OrganizationVo>();
        for (Organization o : orgnizations) {
            OrganizationVo vo = new OrganizationVo();
            vo = wrap(o);
            vos.add(vo);
        }

        return vos;
    }

    public OrganizationVo wrap(Organization orgnization) {
        if (orgnization == null) return null;
        OrganizationVo vo = new OrganizationVo();
        ParameterContainer container = ParameterContainer.getInstance();
        BeanUtils.copyProperties(orgnization, vo);
        if (orgnization.getParent() != null) {
            vo.setParentId(orgnization.getParent().getId());
            vo.setParentName(orgnization.getParent().getName());
        }
        if (vo.getBusiTypeId() != null) {
            vo.setBusiTypeName(container.getBusinessName("BP_YETAI", vo.getBusiTypeId()));
        }
        List<Organization> children = orgnization.getChildren();
        if (children != null && children.size() > 0) {
            vo.setChildren(BeanWrapBuilder.newInstance().wrapList(children, OrganizationVo.class));
        }
        setStatus(vo);
        return vo;
    }

    private void setStatus(OrganizationVo vo) {
        if (StringUtils.isNotEmpty(vo.getStatus())) {
            if (Organization.STATUS_ACTIVE.equals(vo.getStatus())) {
                vo.setStatusName("启用");
            } else if (Organization.STATUS_INACTIVE.equals(vo.getStatus())) {
                vo.setStatusName("未启用");
            }

        }
    }

    @Override
    public void doCallback(Organization org, OrganizationVo vo) {
        // 设置上级名称
        if (org.getParent() != null) {
            vo.setParentId(org.getParent().getId());
            vo.setParentName(org.getParent().getName());
        }
        ParameterContainer container = ParameterContainer.getInstance();
        // 设置机构类型
        if (vo.getOrgType() != null) {
            vo.setOrgTypeName(container.getBusinessName("BP_ORGAN", vo.getOrgType()));
        }
        // 设置业态名称
        if (vo.getBusiTypeId() != null) {
            vo.setBusiTypeName(container.getBusinessName("BP_YETAI", vo.getBusiTypeId()));
        }

        // 设置所在城市
        if (vo.getBusinessArea() != null) {
            RegionVo regionVo = SystemContainer.getInstance().getBean(RegionService.class).findById(vo.getBusinessArea());
            if (regionVo != null) {
                vo.setBusinessAreaName(regionVo.getName());
            }
        }
        // 设置状态
        setStatus(vo);

        // 设置孩子节点
        if (org.getChildren() != null && !org.getChildren().isEmpty()) {
            vo.setChildren(
                    BeanWrapBuilder.newInstance()
                            .setCallback(this)
                            .wrapList(org.getChildren(), OrganizationVo.class)
            );
        }
    }

    @Override
    public List<OrganizationVo> queryChildren(String id) {
        List<Organization> orgs = organizationDao.querySubChildren(id);
        return BeanWrapBuilder.newInstance()
                .setCallback(this)
                .wrapList(orgs, OrganizationVo.class);
    }


    @Override
    public List<OrganizationVo> queryValidChildren(String id) {
        OrganizationBo bo = new OrganizationBo();
        bo.setStatus(Organization.STATUS_ACTIVE);
        List<Organization> orgs = organizationDao.querySubChildren(id, bo);
        return BeanWrapBuilder.newInstance()
                .addProperties(new String[]{"id", "name", "longName", "jianpin", "busiTypeId", "busType", "orgType", "parentId", "isParent"})
                .wrapList(orgs, OrganizationVo.class);
    }

    @Override
    public List<String> findAllChildrenIds(Set<String> orgs) {
        return organizationDao.findAllChildrenIds(orgs);
    }

    @Override
    public PageVo permissionPageQuery(OrganizationBo bo) {
        PageVo vo = new PageVo();
        Long total = organizationDao.permissionTotal(bo);
        vo.setTotal(total);
        if (total == null || total == 0) {
            return vo;
        }
        List<Organization> data = organizationDao.permissionQuery(bo);
        vo.setData(
                BeanWrapBuilder.newInstance()
                        .wrapList(data, OrganizationVo.class)
        );
        return vo;
    }

    @Override
    public List<OrganizationVo> permissionQuery(OrganizationBo bo) {
        List<Organization> data = organizationDao.permissionQuery(bo);
        return BeanWrapBuilder.newInstance()
                .wrapList(data, OrganizationVo.class);
    }


    @Override
    public List<OrganizationVo> permissionRootQuery() {
        List<Organization> data = organizationDao.permissionRootQuery();
        return BeanWrapBuilder.newInstance()
                .wrapList(data, OrganizationVo.class);
    }

    @Override
    public List<OrganizationVo> permissionPersonalParams() {
        OrganizationBo bo = new OrganizationBo();
        bo.setStatus(Organization.STATUS_ACTIVE);
        List<Organization> organizations = organizationDao.permissionQuery(bo);
        final BeanWrapBuilder builder = BeanWrapBuilder.newInstance();
        final Set<String> busiTypeSet = new HashSet<String>();
        builder.addProperties(new String[]{"busiTypeId"});
        builder.setCallback(new BeanWrapCallback<Organization, OrganizationVo>() {
            @Override
            public void doCallback(Organization organization, OrganizationVo vo) {
                String busiTypeId = organization.getBusiTypeId();
                if (busiTypeId == null || "".equals(busiTypeId.trim()) || busiTypeSet.contains(busiTypeId)) {
                    builder.skip();
                    return;
                }
                busiTypeSet.add(busiTypeId);
                ParameterContainer parameterContainer = ParameterContainer.getInstance();
                vo.setBusiTypeName(parameterContainer.getBusinessName("BP_YETAI", busiTypeId));
            }
        });
        return builder.wrapList(organizations, OrganizationVo.class);
    }


}
