package eccrm.base.role.service.impl;

import eccrm.base.parameter.service.ParameterContainer;
import eccrm.base.role.dao.RoleUserDao;
import eccrm.base.role.domain.Role;
import eccrm.base.role.domain.RoleUser;
import eccrm.base.role.service.RoleService;
import eccrm.base.role.service.RoleUserService;
import eccrm.base.role.vo.RoleUserVo;
import eccrm.base.user.domain.User;
import eccrm.core.VoHelper;
import eccrm.utils.Argument;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

/**
 * Generated by miles on 2014-07-21.
 */

@Service("roleUserService")
public class RoleUserServiceImpl implements RoleUserService {
    @Resource
    private RoleUserDao roleUserDao;

    @Override
    public void save(RoleUser roleUser) {
        roleUserDao.save(roleUser);
    }

    @Override
    public void save(String userId, String[] roleIds) {
        Argument.isEmpty(userId, "根据用户ID保存一组角色的关联关系时,用户ID不能为空!");
        Argument.isNull(roleIds, "根据用户ID保存一组角色的关联关系时,角色ID数组不能为空!");
        for (String roleId : roleIds) {
            RoleUser roleUser = new RoleUser(userId, roleId);
            roleUserDao.save(roleUser);
        }
    }

    @Override
    public List<RoleUserVo> queryByUserId(String userId) {
        // 查询用户角色
        List<RoleUser> roles = roleUserDao.queryByUserId(userId);
        // 查询用户所在用户组的角色

        List<RoleUserVo> vos = VoHelper.wrapVos(roles, this);
        Collections.sort(vos, new Comparator<RoleUserVo>() {
            @Override
            public int compare(RoleUserVo o1, RoleUserVo o2) {
                return o1.getRolePinYin().compareTo(o2.getRolePinYin());
            }
        });
        return vos;
    }

    @Override
    public void deleteByUserId(String userId) {
        roleUserDao.deleteByUserId(userId);
    }

    @Override
    public void deleteByIds(String[] ids) {
        roleUserDao.deleteByIds(ids);
    }

    @Override
    public RoleUserVo wrap(RoleUser roleUser) {
        if (roleUser == null) return null;
        RoleUserVo vo = new RoleUserVo();
        vo.setId(roleUser.getId());
        Role role = roleUser.getRole();
        vo.setRoleId(role.getId());
        vo.setRoleName(role.getName());
        vo.setRoleCode(role.getCode());
        vo.setRoleDescription(role.getDescription());
        vo.setRoleEndDate(role.getEndDate());
        vo.setRoleState(ParameterContainer.getInstance().getSystemName(RoleService.ROLE_STATE, role.getStatus()));
        User user = roleUser.getUser();
        vo.setUserId(user.getId());
        vo.setUsername(user.getUsername());
        vo.setRolePinYin(role.getPinyin());
        return vo;
    }
}
