package eccrm.base.role.dao.impl;

import com.ycrl.core.HibernateDaoHelper;
import eccrm.base.role.dao.RoleGroupDao;
import eccrm.base.role.domain.RoleGroup;
import eccrm.utils.Argument;
import org.hibernate.Session;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.springframework.stereotype.Repository;

import java.util.List;


/**
 * Generated by miles on 2014-07-21.
 */

@Repository("roleGroupDao")
public class RoleGroupDaoImpl extends HibernateDaoHelper implements RoleGroupDao {

    @Override
    public String save(RoleGroup roleGroup) {
        return (String) getSession().save(roleGroup);
    }


    @Override
    public void deleteByGroupId(String groupId) {
        Argument.isEmpty(groupId, "根据用户组ID删除对应的角色时,用户组ID不能为空!");
        getSession().createQuery("delete from " + RoleGroup.class.getName() + " rg where rg.group.id=?")
                .setParameter(0, groupId)
                .executeUpdate();
    }

    @Override
    @SuppressWarnings("unchecked")
    public List<RoleGroup> queryByGroupIds(String[] groupIds) {
        Argument.isNull(groupIds, "根据用户组ID数组查询所有的角色时,用户组ID数组不能为空!");
        return createCriteria(RoleGroup.class)
                .add(Restrictions.in("group.id", groupIds))
                .addOrder(Order.asc("sequenceNo"))
                .list();
    }

    @Override
    public int lastSequenceNo(String groupId) {
        Argument.isEmpty(groupId, "根据用户组ID查询下一个序列号时,没有获得用户组ID!");
        Integer next = (Integer) createCriteria(RoleGroup.class)
                .add(Restrictions.eq("group.id", groupId))
                .uniqueResult();
        return (next == null ? 0 : next) + 1;
    }

    @Override
    public void deleteByIds(String[] ids) {
        Argument.isNull(ids, "根据ID删除角色与用户组的关系时,ID数组不能为空!");
        Session session = getSession();
        // 安全删除
        for (String id : ids) {
            session.delete(session.load(RoleGroup.class, id));
        }
    }

    @Override
    @SuppressWarnings("unchecked")
    public List<RoleGroup> queryByGroupId(String groupId) {
        Argument.isEmpty(groupId, "根据用户组ID查询对应的角色时,用户组ID不能为空!");
        return createCriteria(RoleGroup.class)
                .add(Restrictions.eq("group.id", groupId))
                .list();
    }

    @Override
    @SuppressWarnings("unchecked")
    public List<String> queryIdsByGroupId(String groupId) {
        Argument.isEmpty(groupId, "根据用户组ID查询对应的角色ID时,用户组ID不能为空!");
        return createCriteria(RoleGroup.class)
                .setProjection(Projections.property("role.id"))
                .add(Restrictions.eq("group.id", groupId))
                .list();
    }
}