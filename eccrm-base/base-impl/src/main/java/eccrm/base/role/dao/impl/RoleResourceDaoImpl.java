package eccrm.base.role.dao.impl;

import com.ycrl.core.HibernateDaoHelper;
import com.ycrl.core.SystemContainer;
import eccrm.base.common.enums.CommonStatus;
import eccrm.base.menu.domain.Menu;
import eccrm.base.role.dao.RoleGroupDao;
import eccrm.base.role.dao.RoleResourceDao;
import eccrm.base.role.dao.RoleUserDao;
import eccrm.base.role.domain.RoleResource;
import eccrm.base.user.dao.UserGroupDao;
import eccrm.utils.Argument;
import org.apache.log4j.Logger;
import org.hibernate.Criteria;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.springframework.stereotype.Repository;

import java.util.List;


/**
 * Generated by miles on 2014-07-21.
 */

@Repository("roleMenuDao")
public class RoleResourceDaoImpl extends HibernateDaoHelper implements RoleResourceDao {
    private Logger logger = Logger.getLogger(RoleResourceDaoImpl.class);

    @Override
    public void save(RoleResource roleResource) {
        getSession().save(roleResource);
    }

    @Override
    public void deleteByRoleId(String roleId) {
        Argument.isEmpty(roleId, "根据角色ID删除对应的菜单时,角色ID不能为空!");
        getSession().createQuery("delete from " + RoleResource.class.getName() + " rm where rm.role.id=?")
                .setParameter(0, roleId)
                .executeUpdate();
    }

    @Override
    @SuppressWarnings("unchecked")
    public List<Menu> queryByRoleId(String roleId) {
        Argument.isEmpty(roleId, "根据角色ID查询对应的菜单时,角色ID不能为空!");
        return createCriteria(RoleResource.class)
                .setProjection(Projections.property("menu"))
                .add(Restrictions.eq("role.id", roleId))
                .list();
    }

    @Override
    @SuppressWarnings("unchecked")
    public List<Menu> queryByUserId(String userId) {
        Argument.isEmpty(userId, "根据用户ID查询对应的菜单时,用户ID不能为空!");
        RoleUserDao roleUserDao = SystemContainer.getInstance().getBean(RoleUserDao.class);
        List<String> roleIds = roleUserDao.queryRoleIds(userId);
        if (roleIds.isEmpty()) {
            return null;
        }
        return createCriteria(RoleResource.class)
                .setProjection(Projections.property("menu"))
                .add(Restrictions.in("role.id", roleIds))
                .list();
    }


    @Override
    public List<Menu> defendAccessResources(String userId) {
        Argument.isEmpty(userId, "查询用户不允许被访问的资源时,用户ID不能为空!");
        // 查询用户的所有角色
        SystemContainer container = SystemContainer.getInstance();

        logger.debug("查询用户[" + userId + "]的所有用户组...");
        UserGroupDao userGroupDao = container.getBean(UserGroupDao.class);
        logger.debug("查询用户[" + userId + "]的所有角色...");
        logger.debug("查询用户[" + userId + "]的所有可访问的资源...");

        RoleGroupDao roleGroupDao = container.getBean(RoleGroupDao.class, "roleGroupDao");
        Criteria menuIdsCriteria = createCriteria(Menu.class)
                .setProjection(Projections.id())
                .add(Restrictions.eq("status", CommonStatus.ACTIVE.getValue()))
                .add(Restrictions.eq("authorization", true))
                .add(Restrictions.eq("show", true));
        return null;
    }

    @Override
    public void deleteById(String id) {
        getSession().delete(getSession().load(RoleResource.class, id));
    }
}