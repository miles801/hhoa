package eccrm.base.position.dao.impl;

import com.ycrl.core.HibernateDaoHelper;
import eccrm.base.position.bo.ClassifyBo;
import eccrm.base.position.dao.ClassifyDao;
import eccrm.base.position.domain.Classify;
import eccrm.base.position.domain.Position;
import org.hibernate.Criteria;
import org.hibernate.criterion.*;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Set;


/**
 * Generated by chenl on 2014-10-13.
 */

@Repository("classifyDao")
public class ClassifyDaoImpl extends HibernateDaoHelper implements ClassifyDao {

    @Override
    public String save(Classify classify) {
        return (String) getSession().save(classify);
    }

    @Override
    public void update(Classify classify) {
        getSession().update(classify);
    }

    @Override
    public List<Classify> query(ClassifyBo bo) {
        Criteria criteria = getDefaultCriteria(bo);
        return criteria.list();
    }

    @Override
    public long getTotal(ClassifyBo bo) {
        Criteria criteria = createRowCountsCriteria(Classify.class);
        initCriteria(criteria, bo);
        return (Long) criteria.uniqueResult();
    }


    @Override
    public int deleteById(String id) {
        return getSession().createQuery("delete from Classify where id=?")
                .setParameter(0, id)
                .executeUpdate();
    }


    @Override
    public Classify findById(String id) {
        return (Classify) getSession().get(Classify.class, id);
    }

    @Override
    public List<Classify> queryChildren(String path) {

        if (path == null || "".equals(path.trim())) {
            throw new IllegalArgumentException("查询所有的子节点时，path不能为空!");
        }
        Criteria criteria = getDefaultCriteria(null);
        criteria.add(Restrictions.like("path", path, MatchMode.START));
        return null;
    }

    /**
     * 获得默认的org.hibernate.Criteria对象,并根据bo进行初始化（如果bo为null，则会新建一个空对象）
     * 为了防止新的对象中有数据，建议实体/BO均采用封装类型
     */
    private Criteria getDefaultCriteria(ClassifyBo bo) {
        Criteria criteria = createCriteria(Classify.class);
        initCriteria(criteria, bo);
        return criteria;
    }

    /**
     * 根据BO初始化org.hibernate.Criteria对象
     * 如果org.hibernate.Criteria为null，则抛出异常
     * 如果BO为null，则新建一个空的对象
     */
    private void initCriteria(Criteria criteria, ClassifyBo bo) {
        if (criteria == null) {
            throw new IllegalArgumentException("criteria must not be null!");
        }
        if (bo == null) bo = new ClassifyBo();
        criteria.addOrder(Order.asc("seqNo"));
        criteria.add(Example.create(bo).enableLike(MatchMode.ANYWHERE).ignoreCase());
    }


    @Override
    @SuppressWarnings("unchecked")
    public List<String> isParent(Set<String> ids) {
        if (ids == null || ids.isEmpty()) {
            return null;
        }
        return createCriteria(Classify.class)
                .setProjection(Projections.distinct(Projections.property("parentId")))
                .add(Restrictions.in("parentId", ids))
                .list();
    }

    @Override
    @SuppressWarnings("unchecked")
    public List<String> hasPosition(Set<String> ids) {
        if (ids == null || ids.isEmpty()) {
            return null;
        }
        return createCriteria(Position.class)
                .setProjection(Projections.distinct(Projections.property("positionType")))
                .add(Restrictions.in("positionType", ids))
                .list();

    }
}