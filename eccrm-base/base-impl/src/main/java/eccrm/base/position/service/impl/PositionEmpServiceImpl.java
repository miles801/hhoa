package eccrm.base.position.service.impl;


import com.ycrl.core.SystemContainer;
import com.ycrl.core.beans.BeanWrapBuilder;
import com.ycrl.core.beans.BeanWrapCallback;
import com.ycrl.core.exception.InvalidParamException;
import com.ycrl.core.pager.PageVo;
import eccrm.base.employee.domain.Employee;
import eccrm.base.employee.service.EmployeeService;
import eccrm.base.employee.vo.EmployeeVo;
import eccrm.base.parameter.service.ParameterContainer;
import eccrm.base.position.bo.PositionEmpBo;
import eccrm.base.position.dao.PositionEmpDao;
import eccrm.base.position.domain.PositionEmp;
import eccrm.base.position.service.PositionEmpService;
import eccrm.base.position.service.PositionService;
import eccrm.base.position.vo.PositionEmpVo;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.stereotype.Service;
import org.springframework.util.Assert;

import javax.annotation.Resource;
import java.util.ArrayList;
import java.util.List;

/**
 * Generated by chenl on 2014-10-18.
 */

@Service("positionEmpService")
public class PositionEmpServiceImpl implements PositionEmpService, BeanWrapCallback<PositionEmp, PositionEmpVo> {
    @Resource
    private PositionEmpDao positionEmpDao;
    @Resource
    private EmployeeService employeeServices;
    @Resource
    private PositionService positionService;

    @Override
    public String save(PositionEmp positionEmp) {
        return save(positionEmp);
    }

    @Override
    public String saves(PositionEmp positionEmp) {
        // 判断关系是否重复
        boolean exists = positionEmpDao.isExists(positionEmp.getOrgId(), positionEmp.getPositionId(), positionEmp.getEmpId());
        if (exists) return null;
        return positionEmpDao.save(positionEmp);
    }

    @Override
    public void batchSave(String orgId, String positionId, String[] empIds) {
        Assert.hasText(orgId, "保存机构岗位人员:缺少机构ID!");
        Assert.hasText(positionId, "保存机构岗位人员:缺少岗位ID!");
        Assert.notEmpty(empIds, "保存机构岗位人员:缺少员工ID!");
        for (String empId : empIds) {
            PositionEmp emp = new PositionEmp();
            emp.setEmpId(empId);
            emp.setOrgId(orgId);
            emp.setPositionId(positionId);
            saves(emp);
        }
    }


    @Override
    public void batchSaveTwo(String orgId, String positionId, String[] empIds) {
        if (StringUtils.isAnyBlank(orgId, positionId)) {
            throw new InvalidParamException("缺少参数!");
        }
        if (empIds == null || empIds.length < 1) {
            return;
        }
        for (String empId : empIds) {
            PositionEmp positionEmp = new PositionEmp();
            positionEmp.setEmpId(empId);
            positionEmp.setOrgId(orgId);
            positionEmp.setPositionId(positionId);
            positionEmpDao.save(positionEmp);
        }
    }

    @Override
    public void update(PositionEmp positionEmp) {
        positionEmpDao.update(positionEmp);
    }

    @Override
    public PageVo query(PositionEmpBo bo) {
        PageVo vo = new PageVo();
        Long total = positionEmpDao.getTotal(bo);
        vo.setTotal(total);
        if (total == 0) return vo;
        List<PositionEmp> positionEmps = positionEmpDao.query(bo);
        vo.setData(BeanWrapBuilder.newInstance()
                .setCallback(this)
                .wrapList(positionEmps, PositionEmpVo.class));
        return vo;
    }

    @Override
    public PositionEmpVo findById(String id) {
        return wrap(positionEmpDao.findById(id));
    }


    @Override
    public void deleteByIds(String... ids) {
        if (ids == null || ids.length == 0) return;
        for (String id : ids) {
            positionEmpDao.deleteById(id);
        }
    }

    @Override
    public List<EmployeeVo> findByEmployee(String positionId, String orgId) {
        List<EmployeeVo> employees = new ArrayList<EmployeeVo>();
        PositionEmpBo bo = new PositionEmpBo();
        bo.setPositionId(positionId);
        bo.setOrgId(orgId);
        List<PositionEmp> positionEmps = positionEmpDao.query(bo);
        if (positionEmps != null && positionEmps.size() > 0) {
            for (PositionEmp positionEmp : positionEmps) {
                if (positionEmp.getEmpId() != null) {
                    EmployeeVo employee = employeeServices.findById(positionEmp.getEmpId());
                    if (employee != null) {
                        employees.add(employee);
                    }
                }
            }
        }
        return employees;
    }


    public PositionEmpVo wrap(PositionEmp positionEmp) {
        if (positionEmp == null) return null;
        PositionEmpVo vo = new PositionEmpVo();
        BeanUtils.copyProperties(positionEmp, vo);
        vo.setEmpId(positionEmp.getEmpId());
        vo.setEmployeeName(employeeServices.findById(positionEmp.getEmpId()).getEmployeeName());
        vo.setPositionId(positionEmp.getPositionId());
        vo.setPositionName(positionService.findById(positionEmp.getPositionId()).getName());

        return vo;
    }

    @Override
    public void doCallback(PositionEmp position, PositionEmpVo vo) {
        vo.setEmpId(position.getEmpId());
        vo.setEmployeeName(employeeServices.findById(position.getEmpId()).getEmployeeName());
//        vo.setPositionId(position.getPositionId());
//        vo.setPositionName(positionService.findById(position.getPositionId()).getName());
    }

    @Override
    public List<String> findEmployeeIds(String[] positionIds) {
        return positionEmpDao.findEmployeeIds(positionIds);
    }


    @Override
    public List<String> findEmployeeIds(String positionId, String orgId) {
        Assert.hasText(positionId, "岗位ID不能为空!");
        Assert.hasText(orgId, "机构ID不能为空");
        return positionEmpDao.findEmpIds(orgId, positionId);
    }

    @Override
    public List<PositionEmpVo> queryByEmp(String empId) {
        return positionEmpDao.queryByEmp(empId);
    }

    @Override
    public void delete(String orgId, String positionId, String[] empIds) {
        positionEmpDao.delete(orgId, positionId, empIds);
    }

    @Override
    public List<EmployeeVo> queryEmployees(String orgId, String[] positionNames) {
        List<Employee> employees = positionEmpDao.queryEmployees(orgId, positionNames);
        return BeanWrapBuilder.newInstance()
                .addProperties(new String[]{"id", "employeeName"})
                .wrapList(employees, EmployeeVo.class);
    }

    @Override
    public List<EmployeeVo> queryAll(PositionEmpBo bo) {
        List<PositionEmp> positionEmps = positionEmpDao.query(bo);
        List<EmployeeVo> positions = new ArrayList<EmployeeVo>();
        if (positionEmps != null) {
            for (PositionEmp positionEmp : positionEmps) {
                if (positionEmp.getEmpId() != null) {
                    EmployeeVo p = SystemContainer.getInstance().getBean(EmployeeService.class).findById(positionEmp.getEmpId());
                    if (p != null) {
                        positions.add(p);
                    }
                }

            }
        }
        return positions;
    }

    @Override
    public List<PositionEmpVo> findByEmpId(String id) {
        PositionEmpBo bo = new PositionEmpBo();
        bo.setEmpId(id);
        List<PositionEmp> positionEmps = positionEmpDao.query(bo);
        return BeanWrapBuilder.newInstance()
                .setCallback(this)
                .wrapList(positionEmps, PositionEmpVo.class);
    }

    @Override
    public List<String> findPositionIds(String empId) {
        return positionEmpDao.findPositionIds(empId);
    }

    @Override
    public List<String> findOrgParams(String empId) {
        return positionEmpDao.findOrgParams(empId);
    }

    @Override
    public List<String> findOrgIds(String empId) {
        return positionEmpDao.findOrgIds(empId);
    }


    @Override
    public PageVo queryEmployees(String orgId, String positionId) {
        PageVo pageVo = new PageVo();
        if (StringUtils.isAnyBlank(orgId, positionId)) {
            return pageVo;
        }
        PositionEmpBo bo = new PositionEmpBo();
        bo.setPositionId(positionId);
        bo.setOrgId(orgId);
        Long total = positionEmpDao.getTotal(bo);
        pageVo.setTotal(total);
        if (total == null || total < 1) {
            return pageVo;
        }
        List<Employee> employees = positionEmpDao.queryEmployee(orgId, positionId);
        pageVo.setData(BeanWrapBuilder.newInstance()
                .setCallback(new BeanWrapCallback<Employee, EmployeeVo>() {
                    @Override
                    public void doCallback(Employee o, EmployeeVo o2) {
                        ParameterContainer container = ParameterContainer.getInstance();
                        if (o.getStatus() != null) {
                            o2.setStatusName(container.getBusinessName("BP_YGZT", o2.getStatus()));
                        }
                    }
                })
                .wrapList(employees, EmployeeVo.class));
        return pageVo;
    }
}
