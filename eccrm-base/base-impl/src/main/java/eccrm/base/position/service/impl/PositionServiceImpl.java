package eccrm.base.position.service.impl;


import com.ycrl.base.common.CommonStatus;
import com.ycrl.core.SystemContainer;
import com.ycrl.core.beans.BeanWrapBuilder;
import com.ycrl.core.beans.BeanWrapCallback;
import com.ycrl.core.pager.PageVo;
import com.ycrl.utils.string.StringUtils;
import com.ycrl.utils.tree.EntityNotFoundException;
import eccrm.base.org.domain.Organization;
import eccrm.base.org.service.OrgPositionService;
import eccrm.base.parameter.service.ParameterContainer;
import eccrm.base.position.bo.PositionBo;
import eccrm.base.position.dao.PositionDao;
import eccrm.base.position.dao.PositionEmpDao;
import eccrm.base.position.domain.Classify;
import eccrm.base.position.domain.Position;
import eccrm.base.position.service.PositionEmpService;
import eccrm.base.position.service.PositionService;
import eccrm.base.position.service.RoleCodeExistsException;
import eccrm.base.position.service.RoleNameExistsException;
import eccrm.base.position.vo.PositionVo;
import eccrm.utils.ArrayUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import java.util.List;

/**
 * Generated by chenl on 2014-10-11.
 */

@Service("positionService")
public class PositionServiceImpl implements PositionService, BeanWrapCallback<Position, PositionVo> {
    public static final String SYS_BUSI_TYPE = "BP_YETAI";
    public static final String SYS_STATUS = "SP_COMMON_STATE";
    public static final String SYS_GWLX = "SYS_GWLX";
    @Resource
    private PositionDao positionDao;

    @Resource
    private OrgPositionService orgPositionService;

    @Override
    public String save(Position position) {
        if (position.getStatus() == null) {
            position.setStatus(CommonStatus.ACTIVE.getValue());
        }
        String id = positionDao.save(position);
        return id;
    }

    @Override
    public void update(Position position) {
        positionDao.update(position);
    }

    @Override
    public PageVo query(PositionBo bo) {
        PageVo vo = new PageVo();
        Long total = positionDao.getTotal(bo);
        vo.setTotal(total);
        if (total == 0) return vo;
        List<Position> positions = positionDao.query(bo);
        vo.setData(BeanWrapBuilder.newInstance()
                .setCallback(this)
                .wrapList(positions, PositionVo.class));
        return vo;
    }

    @Override
    public PageVo queryInclude(PositionBo bo) {
        PageVo vo = new PageVo();
        Long total = positionDao.getTotal(bo);
        vo.setTotal(total);
        if (total == 0) return vo;
        List<Position> positions = positionDao.query(bo);
        vo.setData(BeanWrapBuilder.newInstance()
//                .addProperties(new String[]{"id", "name"})
                        .setCallback(this)
                        .wrapList(positions, PositionVo.class)
        );
        return vo;
    }

    @Override
    public PositionVo findById(String id) {
        return wrap(positionDao.findById(id));
    }

    @Override
    public PositionVo findByOpId(String id) {
        return wrap(positionDao.findById(id));
    }

    @Override
    public List<PositionVo> findByCode(String code) {
        List<Position> positionList = positionDao.findByCode(code);
        return BeanWrapBuilder.newInstance()
                .setCallback(this)
                .wrapList(positionList, PositionVo.class);
    }

    @Override
    public List<PositionVo> queryByOrgId(String id) {
        List<PositionVo> orgPositionList = orgPositionService.queryByOrgId(id);
//

        return orgPositionList;
    }

    @Override
    public void deleteByIds(String... ids) {
        if (ids == null || ids.length == 0) return;
        for (String id : ids) {
            if ("".equals(id.trim())) continue;
            Position role = positionDao.findById(id);
            if (role == null) {
                throw new EntityNotFoundException("ID为[" + id + "]的岗位不存在或者已经被删除，请刷新重试!");
            }
            String status = role.getStatus();
            if (status == null || status.equals(CommonStatus.CANCELED.getValue()) || status.equals(CommonStatus.INACTIVE.getValue())) {
                positionDao.deleteById(id);
            } else if (status.equals(CommonStatus.ACTIVE.getValue())) {
                role.setStatus(CommonStatus.CANCELED.getValue());
                positionDao.update(role);
            }
        }
    }

    @Override
    public PositionVo wrap(Position position) {
        if (position == null) return null;
        PositionVo vo = new PositionVo();
        BeanUtils.copyProperties(position, vo);
        Classify classify = position.getClassify();
        Organization organization = position.getOrganization();
        if (classify != null) {
            vo.setClassifyId(classify.getId());
            vo.setClassifyName(classify.getName());
        }
        if (organization != null) {
            vo.setOrganizationId(organization.getId());
            vo.setOrganizationName(organization.getName());
        }
////        if(flag){
//            List<EmployeeVo> employees = SystemContainer.getInstance().getBean(PositionEmpService.class).findByEmployee(position.getId());
//            vo.setEmployeeVos(employees);
////        }
        ParameterContainer container = ParameterContainer.getInstance();
        if (vo.getBusiTypeNo() != null) {
            vo.setBusiTypeName(container.getBusinessName(SYS_BUSI_TYPE, vo.getBusiTypeNo()));
        }
        if (vo.getStatus() != null) {

            vo.setStatusName(container.getSystemName(SYS_STATUS, vo.getStatus()));
        }
        if (vo.getRoleType() != null) {

            vo.setRoleTypeName(container.getSystemName(SYS_GWLX, vo.getRoleType()));
        }
        return vo;
    }

    @Override
    public Boolean isExists(String name) {
        if (StringUtils.isEmpty(name)) {
            throw new IllegalArgumentException("岗位名称不能为空!");
        }
        return positionDao.findByName(name);
    }

    /**
     * 保存/更新之前对角色的合法性进行校验
     * 如果不合法，则会抛出相应的异常
     */
    private void verify(Position role) {
        if (role != null) {
            String id = role.getId();
            String name = role.getName();
            String code = role.getCode();
            if (positionDao.hasName(id, name)) {
                throw new RoleNameExistsException(name);
            }
            if (positionDao.hasCode(id, code)) {
                throw new RoleCodeExistsException(code);
            }
        }
    }

    @Override
    public String findUserByPositionName(String... positionNames) {
        if (positionNames == null || positionNames.length == 0) {
            return null;
        }
        List<String> ids = positionDao.findIdByName(positionNames);
        String[] idArr = ArrayUtils.listToArray(ids);
        List<String> empIdList = SystemContainer.getInstance().getBean(PositionEmpService.class).findEmployeeIds(idArr);
        StringBuilder builder = new StringBuilder();
        for (String id : empIdList) {
            builder.append(id).append(",");
        }
        return builder.toString();
    }

    @Override
    public void doCallback(Position position, PositionVo vo) {
        Classify classify = position.getClassify();
        Organization organization = position.getOrganization();
        if (classify != null) {
            vo.setClassifyId(classify.getId());
            vo.setClassifyName(classify.getName());
        }
        if (organization != null) {
            vo.setOrganizationId(organization.getId());
            vo.setOrganizationName(organization.getName());
        }
        ParameterContainer container = ParameterContainer.getInstance();
        if (vo.getBusiTypeNo() != null) {
            vo.setBusiTypeName(container.getBusinessName(SYS_BUSI_TYPE, vo.getBusiTypeNo()));
        }
        if (vo.getStatus() != null) {

            vo.setStatusName(container.getSystemName(SYS_STATUS, vo.getStatus()));
        }
        if (vo.getRoleType() != null) {

            vo.setRoleTypeName(container.getSystemName(SYS_GWLX, vo.getRoleType()));
        }
    }


    @Override
    public List<PositionVo> queryValidByType(String type) {
        if (StringUtils.isEmpty(type)) {
            return null;
        }
        PositionBo bo = new PositionBo();
        bo.setStatus(CommonStatus.ACTIVE.getValue());
        bo.setType(type);
        List<Position> positions = positionDao.query(bo);
        return BeanWrapBuilder.newInstance()
                .setCallback(this)
                .wrapList(positions, PositionVo.class);
    }

    @Override
    public List<String> queryEmployeeByCode(String code) {
        Position position = positionDao.queryByCode(code);
        if (position == null) {
            throw new RuntimeException("数据异常:编号为[" + code + "]的岗位不存在!");
        }
        PositionEmpDao positionEmpDao = SystemContainer.getInstance().getBean(PositionEmpDao.class);
        return positionEmpDao.findEmployeeIds(new String[]{position.getId()});
    }
}
