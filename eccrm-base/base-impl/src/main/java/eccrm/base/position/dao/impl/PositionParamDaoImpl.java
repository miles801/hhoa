package eccrm.base.position.dao.impl;

import com.ycrl.core.HibernateDaoHelper;
import com.ycrl.core.SystemContainer;
import com.ycrl.core.exception.Argument;
import eccrm.base.position.bo.PositionParamBo;
import eccrm.base.position.dao.PositionDao;
import eccrm.base.position.dao.PositionParamDao;
import eccrm.base.position.domain.Position;
import eccrm.base.position.domain.PositionParam;
import org.hibernate.Criteria;
import org.hibernate.criterion.Example;
import org.hibernate.criterion.MatchMode;
import org.hibernate.criterion.Restrictions;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Map;
import java.util.TreeMap;


/**
 * Generated by chenl on 2014-10-20.
 */

@Repository("positionParamDao")
public class PositionParamDaoImpl extends HibernateDaoHelper implements PositionParamDao {

    @Override
    public String save(PositionParam positionParam) {
        return (String) getSession().save(positionParam);
    }

    @Override
    public void update(PositionParam positionParam) {
        getSession().update(positionParam);
    }

    @Override
    public List<PositionParam> query(PositionParamBo bo) {
        Criteria criteria = getDefaultCriteria(bo);
        return criteria.list();
    }

    @Override
    public long getTotal(PositionParamBo bo) {
        Criteria criteria = createRowCountsCriteria(PositionParam.class);
        initCriteria(criteria, bo);
        return (Long) criteria.uniqueResult();
    }


    @Override
    public int deleteById(String id) {
        return getSession().createQuery("delete from PositionParam where id=?")
                .setParameter(0, id)
                .executeUpdate();
    }

    @Override
    public List<PositionParam> findByPosition(String[] busiType) {
        Criteria criteria = createCriteria(PositionParam.class);
        Map<String, String> map = new TreeMap<String, String>();
        if (busiType != null && busiType.length > 0) {
            for (String b : busiType) {
                map.put("busiType", b);
//                Criteria criteriaParam = createCriteria(PositionParam.class);
//                criteriaParam.setProjection(Projections.property("position.id"));
//                criteriaParam.setMaxResults(Integer.MAX_VALUE);
//                criteriaParam.add(Restrictions.allEq("busiType", busiType));
//               List<String> list =criteriaParam.list();
//                if(list != null && list.size()>0){
//                    criteria.add(Restrictions.in("id",list));
//                }else {
//                    criteria.add(Restrictions.eq("id","#&1"));
//                }
            }
        }
        criteria.add(Restrictions.allEq(map));
        return criteria.list();
    }

    @Override
    public boolean isExit(String busiType, String orgType, String positionId) {
        Argument.isEmpty(busiType, "查询当前岗位系统时，系统不能为空!");
        Argument.isEmpty(orgType, "查询当前岗位系统时，机构类型不能为空!");
        Argument.isEmpty(positionId, "查询当前岗位系统时，岗位id不能为空!");
        Criteria criteria = createRowCountsCriteria(PositionParam.class);
        criteria.add(Restrictions.eq("orgType",orgType));
        criteria.add(Restrictions.eq("busiType",busiType));
        criteria.add(Restrictions.eq("position.id", positionId));
        Long  count= (Long) criteria.uniqueResult();
        return count<=0?true:false; 
    }

    @Override
    public PositionParam findById(String id) {
        return (PositionParam) getSession().get(PositionParam.class, id);
    }

    /**
     * 获得默认的org.hibernate.Criteria对象,并根据bo进行初始化（如果bo为null，则会新建一个空对象）
     * 为了防止新的对象中有数据，建议实体/BO均采用封装类型
     */
    private Criteria getDefaultCriteria(PositionParamBo bo) {
        Criteria criteria = createCriteria(PositionParam.class);
        initCriteria(criteria, bo);
        return criteria;
    }

    /**
     * 根据BO初始化org.hibernate.Criteria对象
     * 如果org.hibernate.Criteria为null，则抛出异常
     * 如果BO为null，则新建一个空的对象
     */
    private void initCriteria(Criteria criteria, PositionParamBo bo) {
        if (criteria == null) {
            throw new IllegalArgumentException("criteria must not be null!");
        }
        if (bo == null) bo = new PositionParamBo();
        String positionName =bo.getPositionName();
        if (positionName != null){
           List<Position> positions = SystemContainer.getInstance().getBean(PositionDao.class).findByPositionName(positionName);
            String[] map = new String[positions.size()];
            if(positions != null && positions.size()>0){
                for(int i=0;i<positions.size();i++){
                  Position position =  positions.get(i);
                    if(positions!= null){
                        map[i]=position.getId();
                    }
                }
            }
            if(map !=null && map.length>0){

                criteria.add(Restrictions.in("position.id",map));
            }else {
                criteria.add(Restrictions.eq("id","$#&*"));
            }
        }
        criteria.add(Example.create(bo).enableLike(MatchMode.ANYWHERE).ignoreCase());
    }

}