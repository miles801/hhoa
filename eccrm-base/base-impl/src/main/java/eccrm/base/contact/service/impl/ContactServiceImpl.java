package eccrm.base.contact.service.impl;

import com.ycrl.base.common.DomainHelper;
import com.ycrl.core.beans.BeanWrapBuilder;
import com.ycrl.core.beans.BeanWrapCallback;
import com.ycrl.core.pager.PageVo;
import com.ycrl.utils.string.StringUtils;
import eccrm.base.contact.bo.ContactBo;
import eccrm.base.contact.dao.ContactDao;
import eccrm.base.contact.domain.Contact;
import eccrm.base.contact.service.ContactService;
import eccrm.base.contact.vo.ContactVo;
import eccrm.base.parameter.service.ParameterContainer;
import org.springframework.stereotype.Service;
import org.springframework.util.Assert;

import javax.annotation.Resource;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;


/**
 * Generated by chenl on 2014-09-22.
 */

@Service("contactService")
public class ContactServiceImpl implements ContactService, BeanWrapCallback<Contact, ContactVo> {
    @Resource
    private ContactDao contactDao;

    @Override
    public String save(Contact contact) {
        // 保存表单
        contact.setStartDatetime(new Date());
        String id = contactDao.save(contact);
        return id;
    }


    @Override
    public void update(Contact contact) {
        // 保存表单
        DomainHelper.initModifyInfo(contact);
        contactDao.update(contact);
    }

    @Override
    public PageVo query(ContactBo bo) {
        PageVo vo = new PageVo();
        Long total = contactDao.getTotal(bo);
        vo.setTotal(total);
        if (total == 0) return vo;
        List<Contact> contacts = contactDao.query(bo);
        vo.setData(BeanWrapBuilder.newInstance().setCallback(this).wrapList(contacts, ContactVo.class));
        return vo;
    }

    @Override
    public ContactVo findById(String id) {
        Assert.hasText(id);
        Contact con = contactDao.findById(id);
        return BeanWrapBuilder.newInstance().setCallback(this).wrap(con, ContactVo.class);
    }

    @Override
    public List<ContactVo> findBySheetNo(String sheetNo, String nodeName) {
        List<Contact> contacts = contactDao.findBySheetNo(sheetNo, nodeName);
        return BeanWrapBuilder.newInstance().setCallback(this).wrapList(contacts, ContactVo.class);
    }

    @Override
    public void deleteByIds(String... ids) {
        if (ids == null || ids.length == 0) return;
        for (String id : ids) {
            contactDao.deleteById(id);
        }
    }

    @Override
    public void updateResource(Contact oldContact) {
        String id = oldContact.getId();
        Assert.hasText(id, "联络记录ID不能为空!");
        oldContact.setId(null);
        Contact contact = contactDao.findById(id);
        Assert.notNull(contact, "联络记录[" + id + "]不存在!");
        contact.setResourceId(oldContact.getResourceId());
        contact.setResourceName(oldContact.getResourceName());
        contact.setResourceType(oldContact.getResourceType());
    }

    @Override
    public void updateEndTime(String recordId) {
        Assert.hasText(recordId, "更新联络记录结束时间:录音编号不能为空!");
        Contact contact = contactDao.findByRecordId(recordId);
        Assert.notNull(contact, String.format("录音编号为[%s]的联络记录不存在!", recordId));
        contact.setEndDatetime(new Date());
    }

    @Override
    public void updateFlow(Contact contact) {
        // 验证参数是否正确
        Assert.notNull(contact, "更新联络记录工单信息：联络记录不能为空!");
        String id = contact.getId();
        Assert.hasText(id, "更新联络记录工单信息：联络记录ID不能为空!");
        contact.setId(null);
        String businessId = contact.getBusinessId();
        String flowKey = contact.getFlowKey();
        String flowType = contact.getFlowType();
//        Assert.hasText(businessId, "更新联络记录工单信息：需要绑定的业务ID不能为空!");
        Assert.hasText(flowKey, "更新联络记录工单信息：需要绑定工单编号不能为空!");
        Assert.hasText(flowType, "更新联络记录工单信息：需要绑定工单类型不能为空!");

        // 更新
        Contact originalContact = contactDao.findById(id);
        Assert.notNull(originalContact, "更新联络记录工单信息：联络记录[" + id + "]不存在!");
        originalContact.setBusinessId(businessId);
        originalContact.setFlowKey(flowKey);
        originalContact.setFlowType(flowType);
    }

    @Override
    public PageVo findByIds(String... ids) {
        PageVo vo = new PageVo();
        List<Contact> contacts = new ArrayList<Contact>();
        if (ids == null || ids.length == 0) return vo;
        for (String id : ids) {
            Contact contact = contactDao.findById(id);
            if (contact != null) {
                contacts.add(contact);
            }
        }
        if (contacts != null && contacts.size() > 0) {
            vo.setData(BeanWrapBuilder.newInstance().setCallback(this).wrapList(contacts, ContactVo.class));
            vo.setTotal((long) contacts.size());
        }
        return vo;
    }


    @Override
    public void doCallback(Contact contact, ContactVo vo) {
        ParameterContainer container = ParameterContainer.getInstance();
        // 联络方向
        if (contact.getContactDirect() != null) {
            vo.setContactDirectName(container.getSystemName(SP_CONTACT_DIRECT, contact.getContactDirect()));
        }

        // 联络事项
        if (contact.getContactItem() != null) {
            vo.setContactItemName(container.getBusinessName(BP_CONTACT_ITEM, contact.getContactItem()));
        }

        // 联系渠道、联系方式
        if (contact.getContactMethod() != null) {
            vo.setContactMethodName(container.getSystemName(SP_CHANNEL, contact.getContactMethod()));
        }

        // 联络结果
        if (contact.getResultType() != null) {
            vo.setResultTypeName(container.getBusinessName(BP_CONTACT_RESULT, contact.getResultType()));
        }
        // 客户类型
        if (contact.getResourceType() != null) {
            vo.setResourceTypeName(container.getBusinessName(RESOURCE_TYPE, contact.getResourceType()));
        }

        // 满意度
        if (StringUtils.isNotEmpty(contact.getSatisfaction())) {
//            vo.setSatisfactionName(container.getBusinessName());
        }

    }
}
