package eccrm.base.contact.dao.impl;

import com.ycrl.core.HibernateDaoHelper;
import com.ycrl.core.context.SecurityContext;
import com.ycrl.core.exception.Argument;
import com.ycrl.core.hibernate.criteria.CriteriaUtils;
import eccrm.base.contact.bo.ContactBo;
import eccrm.base.contact.dao.ContactDao;
import eccrm.base.contact.domain.Contact;
import org.hibernate.Criteria;
import org.hibernate.criterion.Restrictions;
import org.springframework.stereotype.Repository;
import org.springframework.util.Assert;

import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;


/**
 * Generated by chenl on 2014-09-22.
 */

@Repository("contactDao")
public class ContactDaoImpl extends HibernateDaoHelper implements ContactDao {

    @Override
    public String save(Contact contact) {
        contact.setCreatorName(SecurityContext.getEmpName());
        return (String) getSession().save(contact);
    }

    @Override
    public void update(Contact contact) {
        getSession().update(contact);
    }

    @Override
    public List<Contact> query(ContactBo bo) {
        Criteria criteria = getDefaultCriteria(bo);
        return criteria.list();
    }

    @Override
    public long getTotal(ContactBo bo) {
        Criteria criteria = createRowCountsCriteria(Contact.class);
        initCriteria(criteria, bo);
        return (Long) criteria.uniqueResult();
    }


    @Override
    public int deleteById(String id) {
        return getSession().createQuery("delete from " + Contact.class.getName() + " c where c.id=?")
                .setParameter(0, id)
                .executeUpdate();
    }

    @Override
    public Contact findById(String id) {
        Argument.isEmpty(id, "id不能为空!");
        return (Contact) getSession().get(Contact.class, id);
    }

    @Override
    public Contact findByRecordId(String recordId) {
        Assert.hasText(recordId, "根据录音编号查询联络记录:录音编号不能为空!");
        return (Contact) createCriteria(Contact.class)
                .add(Restrictions.eq("niceId", recordId))
                .uniqueResult();
    }

    /**
     * 获得默认的org.hibernate.Criteria对象,并根据bo进行初始化（如果bo为null，则会新建一个空对象）
     * 为了防止新的对象中有数据，建议实体/BO均采用封装类型
     */
    private Criteria getDefaultCriteria(ContactBo bo) {
        Criteria criteria = createCriteria(Contact.class);
        initCriteria(criteria, bo);
        return criteria;
    }

    @Override
    public List<Contact> findBySheetNo(String sheetNo, String nodeName) {
        Argument.isEmpty(sheetNo, "工单号不能为空!");
        Criteria criteria = createCriteria(Contact.class);
        criteria.add(Restrictions.eq("code", sheetNo));
        if (nodeName != null) {
            criteria.add(Restrictions.eq("ndoeName", nodeName));
        }
        return criteria.list();

    }

    /**
     * 根据BO初始化org.hibernate.Criteria对象
     * 如果org.hibernate.Criteria为null，则抛出异常
     * 如果BO为null，则新建一个空的对象
     */
    private void initCriteria(Criteria criteria, ContactBo bo) {
        if (criteria == null) {
            throw new IllegalArgumentException("criteria must not be null!");
        }
        if (bo == null) bo = new ContactBo();
        CriteriaUtils.addCondition(criteria, bo);

        Boolean board = bo.getBoard();
        if (board != null && board) {
            criteria.add(Restrictions.eq("creatorId", SecurityContext.getUserId()));
        }
    }


    //将日期往后边退一天
    private Date bigerTime(Date tempTime) {
        Calendar calendar = new GregorianCalendar();
        calendar.setTime(tempTime);
        calendar.add(calendar.DATE, 1);
        return calendar.getTime();
    }

}