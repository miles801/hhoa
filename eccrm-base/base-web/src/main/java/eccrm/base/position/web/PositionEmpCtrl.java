package eccrm.base.position.web;


import com.google.gson.JsonObject;
import com.ycrl.core.exception.InvalidParamException;
import com.ycrl.core.pager.PageVo;
import com.ycrl.core.web.BaseController;
import com.ycrl.utils.gson.GsonUtils;
import com.ycrl.utils.gson.JsonObjectUtils;
import eccrm.base.position.bo.PositionEmpBo;
import eccrm.base.position.domain.PositionEmp;
import eccrm.base.position.service.PositionEmpService;
import eccrm.base.position.vo.PositionEmpVo;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.List;

/**
 * Generated by chenl on 2014-10-18.
 */

@Controller
@RequestMapping(value = {"/wanda/positionEmp"})
public class PositionEmpCtrl extends BaseController {
    @Resource
    private PositionEmpService positionEmpService;

    @RequestMapping(value = {""}, method = RequestMethod.GET)
    public String toList() {
        return "org/list/positionEmp_list";
    }

    @RequestMapping(value = "/add", method = RequestMethod.GET)
    public String toAdd(HttpServletRequest request) {
        request.setAttribute("pageType", "add");
        return "position/positionEmp/edit/positionEmp_edit";
    }

    @RequestMapping(value = "/save", method = RequestMethod.POST)
    @ResponseBody
    public void save(HttpServletRequest request, HttpServletResponse response) {
        PositionEmp positionEmp = GsonUtils.wrapDataToEntity(request, PositionEmp.class);
        positionEmpService.save(positionEmp);
        GsonUtils.printSuccess(response);
    }

    @RequestMapping(value = "/saves", method = RequestMethod.POST)
    @ResponseBody
    public void saves(HttpServletRequest request, HttpServletResponse response) {
        PositionEmp positionEmp = GsonUtils.wrapDataToEntity(request, PositionEmp.class);
        positionEmpService.saves(positionEmp);
        GsonUtils.printSuccess(response);
    }


    /**
     * 批量保存
     * 接收的数据为：{orgId:'',positionId:'',empIds:'xx,yy,zz'}
     */
    @RequestMapping(value = "/batchSave", method = RequestMethod.POST)
    @ResponseBody
    public void batchSave(HttpServletRequest request, HttpServletResponse response) {
        JsonObject jsonObject = GsonUtils.wrapDataToEntity(request, JsonObject.class);
        String orgId = JsonObjectUtils.getStringProperty(jsonObject, "orgId");
        String positionId = JsonObjectUtils.getStringProperty(jsonObject, "positionId");
        String empIds = JsonObjectUtils.getStringProperty(jsonObject, "empIds");
        if (empIds == null) {
            throw new InvalidParamException("批量保存关联关系时，没有指定员工!");
        }
        positionEmpService.batchSave(orgId, positionId, empIds.split(","));
        GsonUtils.printSuccess(response);
    }

    /**
     * 批量保存
     * 接收的数据为：{orgId:'',positionId:'',empIds:'xx,yy,zz'}
     */
    @RequestMapping(value = "/batchSaveTwo", method = RequestMethod.POST)
    @ResponseBody
    public void batchSaveTwo(HttpServletRequest request, HttpServletResponse response) {
        JsonObject jsonObject = GsonUtils.wrapDataToEntity(request, JsonObject.class);
        String orgId = JsonObjectUtils.getStringProperty(jsonObject, "orgId");
        String positionId = JsonObjectUtils.getStringProperty(jsonObject, "positionId");
        String empIds = JsonObjectUtils.getStringProperty(jsonObject, "empIds");
        if (empIds == null) {
            throw new InvalidParamException("批量保存关联关系时，没有指定员工!");
        }
        positionEmpService.batchSaveTwo(orgId, positionId, empIds.split(","));
        GsonUtils.printSuccess(response);
    }

    @RequestMapping(value = "/modify", params = {"id"}, method = RequestMethod.GET)
    public String toModify(@RequestParam String id, HttpServletRequest request) {
        request.setAttribute("pageType", "modify");
        request.setAttribute("id", id);
        return "position/positionEmp/edit/positionEmp_edit";
    }

    @RequestMapping(value = "/update", method = RequestMethod.PUT)
    @ResponseBody
    public void update(HttpServletRequest request, HttpServletResponse response) {
        PositionEmp positionEmp = GsonUtils.wrapDataToEntity(request, PositionEmp.class);
        positionEmpService.update(positionEmp);
        GsonUtils.printSuccess(response);
    }


    @RequestMapping(value = {"/detail"}, params = {"id"}, method = RequestMethod.GET)
    public String toDetail(@RequestParam String id, HttpServletRequest request) {
        request.setAttribute("pageType", "detail");
        request.setAttribute("id", id);
        return "position/positionEmp/edit/positionEmp_edit";
    }

    @ResponseBody
    @RequestMapping(value = "/get", params = {"id"}, method = RequestMethod.GET)
    public void findById(@RequestParam String id, HttpServletResponse response) {
        PositionEmpVo vo = positionEmpService.findById(id);
        GsonUtils.printData(response, vo);
    }

    @ResponseBody
    @RequestMapping(value = "/queryByEmpId", params = {"empId"}, method = RequestMethod.GET)
    public void queryByEmpId(@RequestParam String empId, HttpServletResponse response) {
        List<PositionEmpVo> vo = positionEmpService.queryByEmp(empId);
        GsonUtils.printData(response, vo);
    }


    @ResponseBody
    @RequestMapping(value = "/query", method = RequestMethod.POST)
    public void query(HttpServletRequest request, HttpServletResponse response) {
        PositionEmpBo bo = GsonUtils.wrapDataToEntity(request, PositionEmpBo.class);
        PageVo vo = positionEmpService.query(bo);
        GsonUtils.printData(response, vo);
    }

    @ResponseBody
    @RequestMapping(value = "/queryEmp", params = {"orgId", "positionId"}, method = RequestMethod.GET)
    public void queryEmp(String orgId, String positionId, HttpServletResponse response) {
        PageVo vo = positionEmpService.queryEmployees(orgId, positionId);
        GsonUtils.printData(response, vo);
    }

    @ResponseBody
    @RequestMapping(value = "/delete", params = {"ids"}, method = RequestMethod.DELETE)
    public void deleteByIds(@RequestParam String ids, HttpServletResponse response) {
        String[] idArr = ids.split(",");
        positionEmpService.deleteByIds(idArr);
        GsonUtils.printSuccess(response);
    }

    /**
     * 删除岗位员工的关联关系
     *
     * @param orgId      机构id
     * @param positionId 岗位id
     * @param empIds     员工id（多个值使用逗号分隔）
     */
    @RequestMapping(value = "/delete", params = {"orgId", "positionId", "empIds"}, method = RequestMethod.DELETE)
    @ResponseBody
    public void delete(
            @RequestParam String orgId,
            @RequestParam String positionId,
            @RequestParam String empIds, HttpServletResponse response) {
        positionEmpService.delete(orgId, positionId, empIds.split(","));
        GsonUtils.printSuccess(response);
    }
}
