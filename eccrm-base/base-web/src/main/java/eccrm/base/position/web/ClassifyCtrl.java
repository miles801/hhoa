package eccrm.base.position.web;


import com.ycrl.core.pager.PageVo;
import com.ycrl.core.web.BaseController;
import com.ycrl.utils.gson.GsonUtils;
import eccrm.base.position.bo.ClassifyBo;
import eccrm.base.position.domain.Classify;
import eccrm.base.position.service.ClassifyService;
import eccrm.base.position.vo.ClassifyVo;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.List;

/**
 * Generated by chenl on 2014-10-13.
 */

@Controller
@RequestMapping(value = {"/position/classify"})
public class ClassifyCtrl extends BaseController {
    @Resource
    private ClassifyService classifyService;

    @RequestMapping(value = {""}, method = RequestMethod.GET)
    public String toList() {
        return "classify/classify/list/classify_list";
    }

    @RequestMapping(value = "/add", method = RequestMethod.GET)
    public String toAdd(HttpServletRequest request) {
        request.setAttribute("pageType", "add");
        return "classify/classify/edit/classify_edit";
    }

    @RequestMapping(value = "/save", method = RequestMethod.POST)
    @ResponseBody
    public void save(HttpServletRequest request, HttpServletResponse response) {

        Classify classify = GsonUtils.wrapDataToEntity(request, Classify.class);
        classifyService.save(classify);
        GsonUtils.printSuccess(response);
    }

    @RequestMapping(value = "/modify", params = {"id"}, method = RequestMethod.GET)
    public String toModify(@RequestParam String id, HttpServletRequest request) {
        request.setAttribute("pageType", "modify");
        request.setAttribute("id", id);
        return "classify/classify/edit/classify_edit";
    }

    /**
     * 根据条件查询所有符合条件的菜单，并组装成树，返回
     * {
     * id:'',name:'',children:[]
     * }
     *
     * @param response
     * @return
     */
    @ResponseBody
    @RequestMapping("/tree")
    public String tree(HttpServletResponse response, HttpServletRequest request) {
        ClassifyBo bo = GsonUtils.wrapDataToEntity(request, ClassifyBo.class);
        String status = request.getParameter("status");
        if (status != null) {
            if (bo == null) {
                bo = new ClassifyBo();
            }
            bo.setStatus(status);
        }
        List<ClassifyVo> emailArchiveTypeBos = classifyService.tree(bo);
        GsonUtils.printData(response, emailArchiveTypeBos);
        return null;
    }

    @RequestMapping(value = "/update", method = RequestMethod.POST)
    @ResponseBody
    public void update(HttpServletRequest request, HttpServletResponse response) {
        Classify classify = GsonUtils.wrapDataToEntity(request, Classify.class);
        classifyService.update(classify);
        GsonUtils.printSuccess(response);
    }


    @RequestMapping(value = {"/detail"}, params = {"id"}, method = RequestMethod.GET)
    public String toDetail(@RequestParam String id, HttpServletRequest request) {
        request.setAttribute("pageType", "detail");
        request.setAttribute("id", id);
        return "classify/classify/edit/classify_edit";
    }

    @ResponseBody
    @RequestMapping(value = "/get", params = {"id"}, method = RequestMethod.GET)
    public void findById(@RequestParam String id, HttpServletResponse response) {
        ClassifyVo vo = classifyService.findById(id);
        GsonUtils.printData(response, vo);
    }


    @ResponseBody
    @RequestMapping(value = "/query", method = RequestMethod.POST)
    public void query(HttpServletRequest request, HttpServletResponse response) {
        ClassifyBo bo = GsonUtils.wrapDataToEntity(request, ClassifyBo.class);
        PageVo pageVo = classifyService.query(bo);
        GsonUtils.printData(response, pageVo);
    }

    @ResponseBody
    @RequestMapping(value = "/delete", params = {"ids"}, method = RequestMethod.DELETE)
    public void deleteByIds(@RequestParam String ids, HttpServletResponse response) {
        String[] idArr = ids.split(",");
        classifyService.deleteByIds(idArr);
        GsonUtils.printSuccess(response);
    }

}
