package eccrm.base.position.web;


import com.ycrl.core.pager.PageVo;
import com.ycrl.core.web.BaseController;
import com.ycrl.utils.gson.GsonUtils;
import com.ycrl.utils.string.StringUtils;
import eccrm.base.position.bo.PositionParamBo;
import eccrm.base.position.domain.PositionParam;
import eccrm.base.position.service.PositionParamService;
import eccrm.base.position.vo.PositionParamVo;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * Generated by chenl on 2014-10-20.
 */

@Controller
@RequestMapping(value = {"/position/positionParam"})
public class PositionParamCtrl extends BaseController {
    @Resource
    private PositionParamService positionParamService;

    @RequestMapping(value = {""}, method = RequestMethod.GET)
    public String toList() {
        return "position/positionAllot/list/positionAllot_list";
    }

    @RequestMapping(value = "/add", method = RequestMethod.GET)
    public String toAdd(HttpServletRequest request) {
        request.setAttribute("pageType", "add");
        return "position/positionParam/edit/positionParam_edit";
    }

    @RequestMapping(value = "/save", method = RequestMethod.POST)
    @ResponseBody
    public void save(HttpServletRequest request, HttpServletResponse response) {
        PositionParam positionParam = GsonUtils.wrapDataToEntity(request, PositionParam.class);
        positionParamService.save(positionParam);
        GsonUtils.printSuccess(response);
    }

    @RequestMapping(value = "/modify", params = {"id"}, method = RequestMethod.GET)
    public String toModify(@RequestParam String id, HttpServletRequest request) {
        request.setAttribute("pageType", "modify");
        request.setAttribute("id", id);
        return "position/positionParam/edit/positionParam_edit";
    }

    @RequestMapping(value = "/update", method = RequestMethod.PUT)
    @ResponseBody
    public void update(HttpServletRequest request, HttpServletResponse response) {
        PositionParam positionParam = GsonUtils.wrapDataToEntity(request, PositionParam.class);
        positionParamService.update(positionParam);
        GsonUtils.printSuccess(response);
    }


    @RequestMapping(value = {"/detail"}, params = {"id"}, method = RequestMethod.GET)
    public String toDetail(@RequestParam String id, HttpServletRequest request) {
        request.setAttribute("pageType", "detail");
        request.setAttribute("id", id);
        return "position/positionParam/edit/positionParam_edit";
    }

    @ResponseBody
    @RequestMapping(value = "/get", params = {"id"}, method = RequestMethod.GET)
    public void findById(@RequestParam String id, HttpServletResponse response) {
        PositionParamVo vo = positionParamService.findById(id);
        GsonUtils.printData(response, vo);
    }


    @ResponseBody
    @RequestMapping(value = "/query", method = RequestMethod.POST)
    public void query(HttpServletRequest request, HttpServletResponse response) {
        PositionParamBo bo = GsonUtils.wrapDataToEntity(request, PositionParamBo.class);
        PageVo pageVo = positionParamService.query(bo);
        GsonUtils.printData(response, pageVo);
    }
    //判断指定名称是否存在，返回{exists:true/false}
    @ResponseBody
    @RequestMapping(value = "/queryBusiType", params = {"busiType"}, method = RequestMethod.POST)
    public void queryBusiType(@RequestParam String busiType ,HttpServletRequest request, HttpServletResponse response) {
        PositionParamBo bo = GsonUtils.wrapDataToEntity(request, PositionParamBo.class);
        busiType = StringUtils.decodeByUTF8(busiType);
        if(busiType != null){
            bo.setBusiType(busiType);
        }
        GsonUtils.printData(response, positionParamService.query(bo));
    }
    //判断指定名称是否存在，返回{exists:true/false}
    @ResponseBody
    @RequestMapping(value = "/queryCasCode", params = {"busiType","orgType"}, method = RequestMethod.POST)
    public void queryCasCode(@RequestParam String busiType ,@RequestParam String orgType ,HttpServletRequest request, HttpServletResponse response) {
        PositionParamBo bo = GsonUtils.wrapDataToEntity(request, PositionParamBo.class);
        busiType = StringUtils.decodeByUTF8(busiType);
        orgType = StringUtils.decodeByUTF8(orgType);
        if(busiType != null){
            bo.setBusiType(busiType);
        }
//        if(orgType != null){
//            bo.setOrgType(orgType);
//        }
        GsonUtils.printData(response, positionParamService.query(bo));
    }
    @ResponseBody
    @RequestMapping(value = "/delete", params = {"ids"}, method = RequestMethod.DELETE)
    public void deleteByIds(@RequestParam String ids, HttpServletResponse response) {
        String[] idArr = ids.split(",");
        positionParamService.deleteByIds(idArr);
        GsonUtils.printSuccess(response);
    }

}
