package eccrm.base.position.web;


import com.ycrl.base.common.CommonStatus;
import com.ycrl.core.pager.PageVo;
import com.ycrl.utils.gson.GsonUtils;
import com.ycrl.utils.string.StringUtils;
import com.ycrl.utils.tree.EntityNotFoundException;
import eccrm.base.position.bo.PositionBo;
import eccrm.base.position.dao.ClassifyDao;
import eccrm.base.position.domain.Classify;
import eccrm.base.position.domain.Position;
import eccrm.base.position.service.PositionService;
import eccrm.base.position.vo.PositionVo;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.List;

/**
 * Generated by chenl on 2014-10-11.
 */

@Controller
@RequestMapping(value = {"/position"})
public class PositionCtrl {
    @Resource
    private PositionService positionService;
    @Resource
    private ClassifyDao classifyDao;

    @RequestMapping(value = {""}, method = RequestMethod.GET)
    public String toList() {
        return "position/list/position_list";
    }

    @RequestMapping(value = "/add", method = RequestMethod.GET)
    public String toAdd(HttpServletRequest request) {
        request.setAttribute("pageType", "add");
        return "position/edit/position_edit";
    }

    @RequestMapping(value = "/save", method = RequestMethod.POST)
    @ResponseBody
    public void save(HttpServletRequest request, HttpServletResponse response) {
        Position position = GsonUtils.wrapDataToEntity(request, Position.class);
        positionService.save(position);
        GsonUtils.printSuccess(response);
    }

    @RequestMapping(value = "/modify", params = {"id"}, method = RequestMethod.GET)
    public String toModify(@RequestParam String id, HttpServletRequest request) {
        request.setAttribute("pageType", "modify");
        request.setAttribute("id", id);
        return "base/position/edit/position_edit";
    }

    @RequestMapping(value = "/update", method = RequestMethod.PUT)
    @ResponseBody
    public void update(HttpServletRequest request, HttpServletResponse response) {
        Position position = GsonUtils.wrapDataToEntity(request, Position.class);
        positionService.update(position);
        GsonUtils.printSuccess(response);
    }


    @RequestMapping(value = {"/detail/{id}"}, method = RequestMethod.GET)
    public String toDetail(@PathVariable String id, HttpServletRequest request) {
        request.setAttribute("pageType", "detail");
        request.setAttribute("id", id);
        return "base/position/edit/position_edit";
    }

    @ResponseBody
    @RequestMapping(value = "/get/{id}", method = RequestMethod.GET)
    public void findById(@PathVariable String id, HttpServletResponse response) {
        PositionVo vo = positionService.findByOpId(id);
        GsonUtils.printData(response, vo);
    }

    @ResponseBody
    @RequestMapping(value = "/queryByOrgId", params = {"id"}, method = RequestMethod.GET)
    public void queryByOrgId(@RequestParam String id, HttpServletResponse response) {
        List<PositionVo> positionList = positionService.queryByOrgId(id);
        GsonUtils.printData(response, positionList);
    }

    @ResponseBody
    @RequestMapping(value = "/query", method = RequestMethod.POST)
    public void query(HttpServletRequest request, HttpServletResponse response) {
        PositionBo bo = GsonUtils.wrapDataToEntity(request, PositionBo.class);
        PageVo pageVo = positionService.query(bo);
        GsonUtils.printData(response, pageVo);
    }


    /**
     * 查询指定类型下有效的岗位
     *
     * @param type 类型
     */
    @ResponseBody
    @RequestMapping(value = "/queryValidByType", params = {"type"}, method = RequestMethod.GET)
    public void queryValid(@RequestParam String type, HttpServletResponse response) {
        List<PositionVo> vos = positionService.queryValidByType(type);
        GsonUtils.printData(response, vos);
    }


    @ResponseBody
    @RequestMapping(value = "/query/{id}")
    public String queryAll(@PathVariable String id, HttpServletRequest request, HttpServletResponse response) {
        //分页查询
        Classify classify = classifyDao.findById(id);
        if (classify == null) {
            throw new EntityNotFoundException(id);
        }
        PositionBo bo = GsonUtils.wrapDataToEntity(request, PositionBo.class);
        bo.setClassify(classify);
        bo.setStatus(CommonStatus.ACTIVE.getValue());
        PageVo pageVo = positionService.queryInclude(bo);
        String json = GsonUtils.toJsonInclude(pageVo, "id", "name");
        GsonUtils.printData(response, pageVo);

        return null;
    }

    //判断指定名称是否存在，返回{exists:true/false}
    @ResponseBody
    @RequestMapping(value = "/exists", params = {"name"}, method = RequestMethod.GET)
    public void hasExists(@RequestParam String name, HttpServletRequest request, HttpServletResponse response) {
        String decodedName = StringUtils.decodeByUTF8(name);
        GsonUtils.printData(response, positionService.isExists(decodedName));
    }

    @ResponseBody
    @RequestMapping(value = "/delete", params = {"ids"}, method = RequestMethod.DELETE)
    public void deleteByIds(@RequestParam String ids, HttpServletResponse response) {
        String[] idArr = ids.split(",");
        positionService.deleteByIds(idArr);
        GsonUtils.printSuccess(response);
    }

}
