package eccrm.base.employee.web;

import com.ycrl.core.pager.PageVo;
import com.ycrl.core.web.BaseController;
import com.ycrl.utils.gson.GsonUtils;
import com.ycrl.utils.string.StringUtils;
import eccrm.base.employee.bo.EmployeeBo;
import eccrm.base.employee.domain.Employee;
import eccrm.base.employee.service.EmployeeService;
import eccrm.base.employee.vo.EmployeeVo;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.List;

/**
 * Generated by yanhx on 2014-10-13.
 */

@Controller
@RequestMapping(value = {"/base/employee"})
public class EmployeeCtrl extends BaseController {
    @Resource
    private EmployeeService employeeServices;

    @RequestMapping(value = {""}, method = RequestMethod.GET)
    public String toList() {
        return "employee/list/employee_list";
    }

    @RequestMapping(value = "/add", method = RequestMethod.GET)
    public String toAdd(HttpServletRequest request) {
        request.setAttribute("pageType", "add");
        return "employee/edit/employee_edit";
    }

    /**
     * 员工信息页面（用于仪表盘显示）
     */
    @RequestMapping(value = "/info", method = RequestMethod.GET)
    public String toInfo() {
        return "employee/list/employee";
    }

    @RequestMapping(value = "/save", method = RequestMethod.POST)
    @ResponseBody
    public void save(HttpServletRequest request, HttpServletResponse response) {
        Employee employee = GsonUtils.wrapDataToEntity(request, Employee.class);
        employeeServices.save(employee);
        GsonUtils.printSuccess(response);
    }


    @RequestMapping(value = "/modify/{id}", method = RequestMethod.GET)
    public String toModify(@PathVariable String id, HttpServletRequest request) {
        request.setAttribute("pageType", "modify");
        request.setAttribute("id", id);
        return "employee/edit/employee_edit";
    }

    @RequestMapping(value = "/update", method = RequestMethod.PUT)
    @ResponseBody
    public void update(HttpServletRequest request, HttpServletResponse response) {
        Employee employee = GsonUtils.wrapDataToEntity(request, Employee.class);
        employeeServices.update(employee);
        GsonUtils.printSuccess(response);
    }


    @RequestMapping(value = {"/detail/{id}"}, method = RequestMethod.GET)
    public String toDetail(@PathVariable String id, HttpServletRequest request) {
        request.setAttribute("pageType", "detail");
        request.setAttribute("id", id);
        return "employee/edit/employee_edit";
    }

    @ResponseBody
    @RequestMapping(value = "/RTX", params = {"extensionNumber"}, method = RequestMethod.GET)
    public void findRTX(@RequestParam String extensionNumber, HttpServletResponse response) {
        EmployeeVo vo = employeeServices.findRTX(extensionNumber);
        GsonUtils.printData(response, vo);
    }

    @ResponseBody
    @RequestMapping(value = "/get/{id}", method = RequestMethod.GET)
    public void findById(@PathVariable String id, HttpServletResponse response) {
        EmployeeVo vo = employeeServices.findById(id);
        GsonUtils.printData(response, vo);
    }


    @ResponseBody
    @RequestMapping(value = "/query", method = RequestMethod.POST)
    public void query(HttpServletRequest request, HttpServletResponse response) {
        EmployeeBo bo = GsonUtils.wrapDataToEntity(request, EmployeeBo.class);
        PageVo pageVo = employeeServices.query(bo);
        GsonUtils.printData(response, pageVo);
    }

    /**
     * 带权限的高级分页查询
     *
     * @param request
     * @param response
     */
    @ResponseBody
    @RequestMapping(value = "/permissionPageQuery", method = RequestMethod.POST)
    public void permissionPageQuery(HttpServletRequest request, HttpServletResponse response) {
        EmployeeBo bo = GsonUtils.wrapDataToEntity(request, EmployeeBo.class);
        PageVo pageVo = employeeServices.permissionPageQuery(bo);
        GsonUtils.printData(response, pageVo);
    }

    /**
     * 只查询员工状态为（正式、调动中、实习）的数据
     */
    @ResponseBody
    @RequestMapping(value = "/queryValid", method = RequestMethod.POST)
    public void queryValid(HttpServletRequest request, HttpServletResponse response) {
        EmployeeBo bo = GsonUtils.wrapDataToEntity(request, EmployeeBo.class);
        PageVo pageVo = employeeServices.queryValid(bo);
        GsonUtils.printData(response, pageVo);
    }

    //判断指定名称是否存在，返回{exists:true/false}
    @ResponseBody
    @RequestMapping(value = "/exists", params = {"extensionNumber"}, method = RequestMethod.GET)
    public void hasExists(@RequestParam String extensionNumber, HttpServletRequest request, HttpServletResponse response) {
        String decodedName = StringUtils.decodeByUTF8(extensionNumber);
        GsonUtils.printData(response, employeeServices.isExists(decodedName));
    }

    @ResponseBody
    @RequestMapping(value = "/querys", method = RequestMethod.POST)
    public void querys(HttpServletRequest request, HttpServletResponse response) {
        EmployeeBo bo = GsonUtils.wrapDataToEntity(request, EmployeeBo.class);
        List<EmployeeVo> employeeVos = employeeServices.querys(bo);
        PageVo pageVo = new PageVo();
        pageVo.setTotal(Long.valueOf(employeeVos.size()));
        pageVo.setData(employeeVos);
        GsonUtils.printData(response, pageVo);
    }

    @ResponseBody
    @RequestMapping(value = "/queryByOrgId", params = {"id"}, method = RequestMethod.GET)
    public void queryByOrgId(@RequestParam String id, HttpServletResponse response) {
        List<Employee> employeeList = employeeServices.queryByOrgId(id);
        PageVo vo = new PageVo();
        vo.setTotal(Long.valueOf(employeeList.size()));
        vo.setData(employeeList);
        GsonUtils.printData(response, vo);
    }

    @ResponseBody
    @RequestMapping(value = "/queryByRuleId", params = {"id", "orgId"}, method = RequestMethod.GET)
    public void queryByRuleId(@RequestParam String id, @RequestParam String orgId, HttpServletResponse response) {
        List<EmployeeVo> employeeList = employeeServices.queryByRuleId(id, orgId);
        GsonUtils.printData(response, employeeList);
    }

    @ResponseBody
    @RequestMapping(value = "/delete", params = {"ids"}, method = RequestMethod.DELETE)
    public void deleteByIds(@RequestParam String ids, HttpServletResponse response) {
        String[] idArr = ids.split(",");
        employeeServices.deleteByIds(idArr);
        GsonUtils.printSuccess(response);
    }

}
