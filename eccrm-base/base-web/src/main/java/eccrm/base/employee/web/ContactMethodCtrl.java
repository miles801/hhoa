package eccrm.base.employee.web;

import com.ycrl.core.pager.PageVo;
import com.ycrl.core.web.BaseController;
import com.ycrl.utils.gson.GsonUtils;
import eccrm.base.employee.bo.ContactMethodBo;
import eccrm.base.employee.domain.ContactMethod;
import eccrm.base.employee.service.ContactMethodService;
import eccrm.base.employee.vo.ContactMethodVo;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * Generated by chenl on 2014-10-22.
 */

@Controller
@RequestMapping(value = {"/base/contactMethod"})
public class ContactMethodCtrl extends BaseController {
    @Resource
    private ContactMethodService contactMethodService;

    @RequestMapping(value = {""}, method = RequestMethod.GET)
    public String toList() {
        return "base/contactMethod/list/contactMethod_list";
    }

    @RequestMapping(value = "/add", method = RequestMethod.GET)
    public String toAdd(HttpServletRequest request) {
        request.setAttribute("pageType", "add");
        return "base/contactMethod/edit/contactMethod_edit";
    }

    @RequestMapping(value = "/save", method = RequestMethod.POST)
    @ResponseBody
    public void save(HttpServletRequest request, HttpServletResponse response) {
        ContactMethod contactMethod = GsonUtils.wrapDataToEntity(request, ContactMethod.class);
        contactMethodService.save(contactMethod);
        GsonUtils.printSuccess(response);
    }

    @RequestMapping(value = "/modify", params = {"id"}, method = RequestMethod.GET)
    public String toModify(@RequestParam String id, HttpServletRequest request) {
        request.setAttribute("pageType", "modify");
        request.setAttribute("id", id);
        return "base/contactMethod/edit/contactMethod_edit";
    }

    @RequestMapping(value = "/update", method = RequestMethod.PUT)
    @ResponseBody
    public void update(HttpServletRequest request, HttpServletResponse response) {
        ContactMethod contactMethod = GsonUtils.wrapDataToEntity(request, ContactMethod.class);
        contactMethodService.update(contactMethod);
        GsonUtils.printSuccess(response);
    }


    @RequestMapping(value = {"/detail"}, params = {"id"}, method = RequestMethod.GET)
    public String toDetail(@RequestParam String id, HttpServletRequest request) {
        request.setAttribute("pageType", "detail");
        request.setAttribute("id", id);
        return "base/contactMethod/edit/contactMethod_edit";
    }

    @ResponseBody
    @RequestMapping(value = "/get", params = {"id"}, method = RequestMethod.GET)
    public void findById(@RequestParam String id, HttpServletResponse response) {
        ContactMethodVo vo = contactMethodService.findById(id);
        GsonUtils.printData(response, vo);
    }


    @ResponseBody
    @RequestMapping(value = "/query", method = RequestMethod.POST)
    public void query(HttpServletRequest request, HttpServletResponse response) {
        ContactMethodBo bo = GsonUtils.wrapDataToEntity(request, ContactMethodBo.class);
        PageVo pageVo = contactMethodService.query(bo);
        GsonUtils.printData(response, pageVo);
    }

    @ResponseBody
    @RequestMapping(value = "/delete", params = {"ids"}, method = RequestMethod.DELETE)
    public void deleteByIds(@RequestParam String ids, HttpServletResponse response) {
        String[] idArr = ids.split(",");
        contactMethodService.deleteByIds(idArr);
        GsonUtils.printSuccess(response);
    }

}
