package eccrm.base.org.web;

import com.ycrl.core.pager.PageVo;
import com.ycrl.core.web.BaseController;
import com.ycrl.utils.gson.GsonUtils;
import eccrm.base.org.bo.OrgPositionBo;
import eccrm.base.org.domain.OrgPosition;
import eccrm.base.org.service.OrgPositionService;
import eccrm.base.org.vo.OrgPositionVo;
import eccrm.base.position.vo.PositionVo;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.List;

/**
 * Generated by yanhx on 2014-10-13.
 */

@Controller
@RequestMapping(value = {"/wanda/orgPosition"})
public class OrgPositionCtrl extends BaseController {
    @Resource
    private OrgPositionService orgPositionService;

    @RequestMapping(value = {""}, method = RequestMethod.GET)
    public String toList() {
        return "org/list/orgPosition_list";
    }

    @RequestMapping(value = "/add", method = RequestMethod.GET)
    public String toAdd(HttpServletRequest request) {
        request.setAttribute("pageType", "add");
        return "";
    }

    @RequestMapping(value = "/save", method = RequestMethod.POST)
    @ResponseBody
    public void save(HttpServletRequest request, HttpServletResponse response) {
        OrgPosition orgPosition = GsonUtils.wrapDataToEntity(request, OrgPosition.class);
        try {
            orgPositionService.save(orgPosition);
            GsonUtils.printSuccess(response);
        } catch (Exception e) {
            GsonUtils.printError(response, "异常：" + e);

        }
    }


    @RequestMapping(value = "/modify", params = {"id"}, method = RequestMethod.GET)
    public String toModify(@RequestParam String id, HttpServletRequest request) {
        request.setAttribute("pageType", "modify");
        request.setAttribute("id", id);
        return "";
    }

    @RequestMapping(value = "/update", method = RequestMethod.PUT)
    @ResponseBody
    public void update(HttpServletRequest request, HttpServletResponse response) {
        OrgPosition orgPosition = GsonUtils.wrapDataToEntity(request, OrgPosition.class);
        orgPositionService.update(orgPosition);
        GsonUtils.printSuccess(response);
    }


    @RequestMapping(value = {"/detail"}, params = {"id"}, method = RequestMethod.GET)
    public String toDetail(@RequestParam String id, HttpServletRequest request) {
        request.setAttribute("pageType", "detail");
        request.setAttribute("id", id);
        return "";
    }

    @ResponseBody
    @RequestMapping(value = "/get", params = {"id"}, method = RequestMethod.GET)
    public void findById(@RequestParam String id, HttpServletResponse response) {
        OrgPositionVo vo = orgPositionService.findById(id);
        GsonUtils.printData(response, vo);
    }


    /**
     * 查询一个组织机构下的所有的岗位信息
     * <p>注意：只返回岗位的基本信息</p>
     *
     * @param orgId 岗位id
     */
    @ResponseBody
    @RequestMapping(value = "/queryPositionByOrgId", params = {"orgId"}, method = RequestMethod.GET)
    public void queryByOrgId(@RequestParam String orgId, HttpServletResponse response) {
        List<PositionVo> positionVos = orgPositionService.queryByOrgId(orgId);
        GsonUtils.printData(response, positionVos);
    }

    /**
     * 分页查询一个组织机构下的所有的岗位信息
     * <p>注意：只返回岗位的基本信息</p>
     *
     * @param orgId 岗位id
     */
    @ResponseBody
    @RequestMapping(value = "/pageQueryByOrgId", params = {"orgId"}, method = RequestMethod.GET)
    public void pageQueryByOrgId(@RequestParam String orgId, HttpServletResponse response) {
        PageVo vo = orgPositionService.pageQueryByOrgId(orgId);
        GsonUtils.printData(response, vo);
    }

    /**
     * 查询指定类型下有效的岗位
     *
     * @param code 编号
     */
    @ResponseBody
    @RequestMapping(value = "/queryValidByCode", params = {"code"}, method = RequestMethod.GET)
    public void queryValidCode(@RequestParam String code, HttpServletResponse response) {
        OrgPositionVo vos = orgPositionService.queryValidByCode(code);
        GsonUtils.printData(response, vos);
    }
    @ResponseBody
    @RequestMapping(value = "/queryByOrgIdforTree", params = {"id"}, method = RequestMethod.GET)
    public void queryByOrgIdforTree(@RequestParam String id, HttpServletResponse response) {
        PageVo vo = orgPositionService.queryByOrgIdforTree(id);
//            String json = GsonUtils.toJsonInclude(orgPositions,"id","name","shortName","jianPin","roleType","roleTypeName","pinyin");
//            com.ycrl.utils.gson.GsonUtils.printJson(response, json);

        GsonUtils.printData(response, vo);

    }

    @ResponseBody
    @RequestMapping(value = "/queryByOrgIdData", params = {"id"}, method = RequestMethod.GET)
    public void queryByOrgIdData(@RequestParam String id, HttpServletResponse response) {
        List<PositionVo> orgPositions = orgPositionService.queryByOrgId(id);
        GsonUtils.printData(response, orgPositions);

    }

    @ResponseBody
    @RequestMapping(value = "/queryAll", method = RequestMethod.GET)
    public void queryAll(HttpServletRequest request, HttpServletResponse response) {
        OrgPositionBo bo = GsonUtils.wrapDataToEntity(request, OrgPositionBo.class);
        List<PositionVo> orgPositions = orgPositionService.queryAll(bo);
        String json = GsonUtils.toJsonInclude(orgPositions, "id", "name", "shortName", "jianPin", "roleType", "roleTypeName", "pinyin");
        com.ycrl.utils.gson.GsonUtils.printJson(response, json);
        GsonUtils.printData(response, json);
    }

    @ResponseBody
    @RequestMapping(value = "/query", method = RequestMethod.POST)
    public void query(HttpServletRequest request, HttpServletResponse response) {
        OrgPositionBo bo = GsonUtils.wrapDataToEntity(request, OrgPositionBo.class);
        PageVo pageVo = orgPositionService.query(bo);
        GsonUtils.printData(response, pageVo);
    }

    @ResponseBody
    @RequestMapping(value = "/delete", params = {"ids"}, method = RequestMethod.DELETE)
    public void deleteByIds(@RequestParam String ids, HttpServletResponse response) {
        String[] idArr = ids.split(",");
        orgPositionService.deleteByIds(idArr);
        GsonUtils.printSuccess(response);
    }

    @ResponseBody
    @RequestMapping(value = "/deleteByRoleId", method = RequestMethod.POST)
    public void deleteByRoleId(HttpServletRequest request, HttpServletResponse response) {
        OrgPositionBo bo = GsonUtils.wrapDataToEntity(request, OrgPositionBo.class);
        orgPositionService.deleteByRoleId(bo);
        GsonUtils.printSuccess(response);
    }


    /**
     * 查询所有具有岗位的组织机构的id
     */
    @ResponseBody
    @RequestMapping(value = "/whoHasPosition", method = RequestMethod.GET)
    public void whoHasPosition(HttpServletResponse response) {
        List<String> ids = orgPositionService.whoHasPosition();
        GsonUtils.printData(response, ids);

    }
}
