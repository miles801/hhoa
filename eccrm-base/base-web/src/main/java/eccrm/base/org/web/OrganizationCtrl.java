package eccrm.base.org.web;


import com.ycrl.core.pager.PageVo;
import com.ycrl.utils.gson.GsonUtils;
import eccrm.base.org.bo.OrganizationBo;
import eccrm.base.org.domain.Organization;
import eccrm.base.org.service.OrganizationService;
import eccrm.base.org.vo.OrganizationVo;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.List;

/**
 * Generated by yanhx on 2014-10-13.
 */

@Controller
@RequestMapping(value = {"/base/org"})
public class OrganizationCtrl {
    @Resource
    private OrganizationService organizationService;

    @RequestMapping(value = {""}, method = RequestMethod.GET)
    public String toList() {
        return "org/list/org_list";
    }

    @RequestMapping(value = "/add", method = RequestMethod.GET)
    public String toAdd(HttpServletRequest request) {
        request.setAttribute("pageType", "add");
        return "Orgnization/orgnization/edit/orgnization_edit";
    }

    @RequestMapping(value = "/save", method = RequestMethod.POST)
    @ResponseBody
    public void save(HttpServletRequest request, HttpServletResponse response) {
        Organization organization = GsonUtils.wrapDataToEntity(request, Organization.class);
        organizationService.save(organization);
        GsonUtils.printSuccess(response);
    }


    @RequestMapping(value = "/modify", params = {"id"}, method = RequestMethod.GET)
    public String toModify(@RequestParam String id, HttpServletRequest request) {
        request.setAttribute("pageType", "modify");
        request.setAttribute("id", id);
        return "Orgnization/orgnization/edit/orgnization_edit";
    }

    @RequestMapping(value = "/update", method = RequestMethod.POST)
    @ResponseBody
    public void update(HttpServletRequest request, HttpServletResponse response) {
        Organization organization = GsonUtils.wrapDataToEntity(request, Organization.class);
        organizationService.update(organization);
        GsonUtils.printSuccess(response);
    }


    @RequestMapping(value = {"/detail"}, params = {"id"}, method = RequestMethod.GET)
    public String toDetail(@RequestParam String id, HttpServletRequest request) {
        request.setAttribute("pageType", "detail");
        request.setAttribute("id", id);
        return "Orgnization/orgnization/edit/orgnization_edit";
    }

    @ResponseBody
    @RequestMapping(value = "/get", params = {"id"}, method = RequestMethod.GET)
    public void findById(@RequestParam String id, HttpServletResponse response) {
        OrganizationVo vo = organizationService.findById(id);
//        String json = GsonUtils.toJsonInclude(vo);
//        com.ycrl.utils.gson.GsonUtils.printJson(response, json);
        GsonUtils.printData(response, vo);
    }

    @ResponseBody
    @RequestMapping(value = "/addPostion", params = {"id"}, method = RequestMethod.GET)
    public void addPostion(@RequestParam String id, HttpServletResponse response) {
        try {
            boolean b = organizationService.addPostion(id);
            GsonUtils.printSuccess(response);
        } catch (Exception e) {
            GsonUtils.printError(response, "异常：" + e);
        }

    }

    @ResponseBody
    @RequestMapping(value = "/query", method = RequestMethod.POST)
    public void query(HttpServletRequest request, HttpServletResponse response) {
        OrganizationBo bo = GsonUtils.wrapDataToEntity(request, OrganizationBo.class);
        PageVo pageVo = organizationService.query(bo);
        GsonUtils.printData(response, pageVo);
    }

    @ResponseBody
    @RequestMapping(value = "/queryAll", method = RequestMethod.POST)
    public void queryqueryAll(HttpServletRequest request, HttpServletResponse response) {
        OrganizationBo bo = GsonUtils.wrapDataToEntity(request, OrganizationBo.class);
        PageVo pageVo = organizationService.queryAll(bo);
        GsonUtils.printData(response, pageVo);
    }

    @ResponseBody
    @RequestMapping(value = "/tree", method = RequestMethod.POST)
    public void tree(HttpServletRequest request, HttpServletResponse response) {
        OrganizationBo bo = new OrganizationBo();
        List<OrganizationVo> organizationVoList = organizationService.tree(bo);
        GsonUtils.printData(response, organizationVoList);
//        String json = GsonUtils.toJsonInclude(organizationVoList, "id", "name", "children");
//        com.ycrl.utils.gson.GsonUtils.printJson(response, json);

    }

    @ResponseBody
    @RequestMapping(value = "/trees", method = RequestMethod.POST)
    public void trees(HttpServletRequest request, HttpServletResponse response) {
        List<OrganizationVo> organizationVoList = organizationService.trees();
        GsonUtils.printData(response, organizationVoList);
//        String json = GsonUtils.toJsonInclude(organizationVoList, "id", "name", "children");
//        com.ycrl.utils.gson.GsonUtils.printJson(response, json);

    }

    @ResponseBody
    @RequestMapping(value = "/children", params = {"id"}, method = RequestMethod.GET)
    public void allChildren(@RequestParam String id, HttpServletResponse response) {
        PageVo list = organizationService.queryAllChildren(id);
        GsonUtils.printData(response, list);
    }

    /**
     * 查询直接孩子节点
     * 可选参数：id
     */
    @ResponseBody
    @RequestMapping(value = "/queryChildren", method = RequestMethod.GET)
    public void queryChildren(@RequestParam(required = false) String id,
                              HttpServletResponse response) {
        List<OrganizationVo> data = organizationService.queryChildren(id);
        GsonUtils.printData(response, data);
    }

    /**
     * 查询直接孩子节点（只会查询状态为有效的数据）
     * 可选参数：id
     */
    @ResponseBody
    @RequestMapping(value = "/queryValidChildren", method = RequestMethod.GET)
    public void queryValidChildren(@RequestParam(required = false) String id,
                                   HttpServletResponse response) {
        List<OrganizationVo> data = organizationService.queryValidChildren(id);
        GsonUtils.printData(response, data);
    }

    @ResponseBody
    @RequestMapping(value = "/queryEffective", method = RequestMethod.POST)
    public void queryEffective(HttpServletRequest request, HttpServletResponse response) {
        OrganizationBo bo = new OrganizationBo();
        bo.setStatus("0");
        PageVo pageVo = organizationService.query(bo);
        GsonUtils.printData(response, pageVo);
//        String json = GsonUtils.toJsonInclude(pageVo.getData(), "id", "name", "status", "children");
//        com.ycrl.utils.gson.GsonUtils.printJson(response, json);

    }

    @ResponseBody
    @RequestMapping(value = "/delete", params = {"ids"}, method = RequestMethod.DELETE)
    public void deleteByIds(@RequestParam String ids, HttpServletResponse response) {
        String[] idArr = ids.split(",");
        organizationService.deleteByIds(idArr);
        GsonUtils.printSuccess(response);
    }

    /**
     * 带数据权限的分页查询
     */
    @ResponseBody
    @RequestMapping(value = "/permissionPageQuery", method = RequestMethod.GET)
    public void permissionPageQuery(HttpServletRequest request, HttpServletResponse response) {
        OrganizationBo bo = GsonUtils.wrapDataToEntity(request, OrganizationBo.class);
        PageVo vo = organizationService.permissionPageQuery(bo);
        GsonUtils.printData(response, vo);
    }

    /**
     * 带数据权限根机构的查询
     */
    @ResponseBody
    @RequestMapping(value = "/permissionRootQuery", method = RequestMethod.GET)
    public void permissionRootQuery(HttpServletRequest request, HttpServletResponse response) {
        List<OrganizationVo> vo = organizationService.permissionRootQuery();
        GsonUtils.printData(response, vo);
    }

    // 查询个人的系统集合
    @ResponseBody
    @RequestMapping(value = "/permissionPersonalParams", method = RequestMethod.GET)
    public void permissionPersonalParams(HttpServletResponse response) {
        List<OrganizationVo> vos = organizationService.permissionPersonalParams();
        GsonUtils.printData(response, vos);
    }

    /**
     * 带数据权限的高级查询
     */
    @ResponseBody
    @RequestMapping(value = "/permissionQuery", method = RequestMethod.GET)
    public void permissionQuery(HttpServletRequest request, HttpServletResponse response) {
        OrganizationBo bo = GsonUtils.wrapDataToEntity(request, OrganizationBo.class);
        List<OrganizationVo> data = organizationService.permissionQuery(bo);
        GsonUtils.printData(response, data);
    }

}
